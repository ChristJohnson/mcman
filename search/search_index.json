{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mcman","text":"<p>Welcome to the <code>mcman</code> docs! Here, have some tea and make yourself comfortable. \ud83e\uded6</p> <p></p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li>Installation</li> <li>Getting Started</li> <li>Building, Running and Developing</li> <li>Variables and Bootstrapping</li> <li>Commands</li> <li>Reference</li> </ul>"},{"location":"#about","title":"About","text":"<p><code>mcman</code> allows you to:</p> <ul> <li>Have a single <code>server.toml</code> for auto-updating plugins/mods, the server jar, worlds, etc...</li> <li>get rid of the hassle of downloading and dragging over jar files,</li> <li>efficiently write config files using config and environment variables,</li> <li>use <code>git</code> for your servers to be able to version control and collaborate,</li> <li>render markdown about the server</li> <li>test if the server works using CI</li> <li>and more!</li> </ul> <p><code>mcman</code> is not great for:</p> <ul> <li>Creating clientside modpacks or modpacks to only publish them (use packwiz for that)</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Here are a few ways to install mcman. Whats Next? -&gt;</p> Github ReleasesWindows: ScoopAUR: mcman-binLinux: wgetCargo/Rust <p>You can use the links below to get the mcman executable.</p> <p> Windows  OSX/Linux</p> <p> Github Releases Page  Build Action (nightly)</p> <p>Add the minecraft bucket and install mcman:</p> <pre><code>scoop bucket add minecraft https://github.com/The-Simples/scoop-minecraft\nscoop install mcman\n</code></pre> <p>Scoop is a command-line installer for Windows. You can use 2 commands in powershell to install it. (4 commands in total to install mcman!)</p> <p><code>mcman</code> is available in AUR as <code>mcman-bin</code></p> <pre><code>https://aur.archlinux.org/mcman-bin.git\n</code></pre> <p>Install to <code>/usr/bin</code> using <code>wget</code>:</p> <pre><code>wget https://github.com/ParadigmMC/mcman/releases/latest/download/mcman\nsudo mv ./mcman /usr/bin/\nsudo chmod +x /usr/bin/mcman\n</code></pre> <p>If you have rust installed, you can compile mcman from source:</p> <pre><code>cargo install --git https://github.com/ParadigmMC/mcman.git\n</code></pre>"},{"location":"commands/","title":"CLI Commands","text":"<p>This section shows the commands of mcman. You can type <code>mcman</code>, <code>mcman help</code> or <code>mcman --help</code> for a basic list of it.</p>"},{"location":"commands/#cheatsheet","title":"Cheatsheet","text":"<ul> <li>Create<ul> <li><code>mcman init</code>: create new server</li> <li><code>mcman init --mrpack &lt;source&gt;</code>: create server from mrpack</li> <li><code>mcman init --packwiz &lt;source&gt;</code>: create server from packwiz</li> </ul> </li> <li>Build<ul> <li><code>mcman build</code>: build the server</li> <li><code>mcman run</code>: build then run the server</li> <li><code>mcman run --test</code>: build then run to test if it works</li> <li><code>mcman dev</code>: start a dev session</li> </ul> </li> <li>Addons<ul> <li><code>mcman import url &lt;url&gt;</code>: import an addon from url</li> <li><code>mcman import datapack &lt;url&gt;</code>: import datapacks</li> </ul> </li> <li>Export/Import<ul> <li><code>mcman import packwiz &lt;source&gt;</code>: import packwiz packs</li> <li><code>mcman import mrpack &lt;source&gt;</code>: import mrpacks</li> <li><code>mcman export packwiz [pack folder]</code>: export as packwiz pack</li> <li><code>mcman export mrpack [filename.mrpack]</code>: export as mrpack</li> </ul> </li> <li>Info<ul> <li><code>mcman info</code>: show info about the server</li> <li><code>mcman version</code>: show version</li> </ul> </li> <li>Cache<ul> <li><code>mcman cache path</code>: print cache path</li> <li><code>mcman cache open</code>: open the cache folder</li> <li><code>mcman cache list [-d]</code>: list caches, <code>-d</code> for detailed</li> <li><code>mcman cache clear</code>: delete caches without confirm</li> </ul> </li> <li>Misc<ul> <li><code>mcman markdown</code>: render markdown templates</li> <li><code>mcman download &lt;dl&gt;</code>: download a downloadable</li> <li><code>mcman world unpack [world]</code>: unzip a world</li> <li><code>mcman pull &lt;file&gt;</code>: pull files from <code>server/</code> to <code>config/</code></li> <li><code>mcman env gitignore</code>: edit git dotfiles</li> <li><code>mcman env docker</code>: create default docker files</li> </ul> </li> </ul>"},{"location":"commands/build/","title":"<code>mcman build</code>","text":"<p>See the page for Building for more info</p>"},{"location":"commands/build/#-force","title":"<code>--force</code>","text":"<p>The <code>--force</code> flag can be used to make mcman not skip already downloaded files, basically acting like the output directory is empty.</p>"},{"location":"commands/build/#-output-path","title":"<code>--output &lt;path&gt;</code>","text":"<p>You can alternatively set the output folder manually using <code>--output &lt;path&gt;</code> option. The default is <code>server</code>.</p>"},{"location":"commands/build/#-skip-s","title":"<code>--skip</code>/<code>-s</code>","text":"<p>You can use the <code>--skip</code>/<code>-s</code> flag to skip stages.</p> <ul> <li>Use the flag multiple times to skip many: <code>-s bootstrap -s worlds</code></li> <li>The stages are: <code>plugins</code>, <code>mods</code>, <code>worlds</code> and <code>bootstrap</code></li> </ul>"},{"location":"commands/build/#after-building","title":"After building","text":"<p>After building, you can start the server with the launch scripts if theyre not disabled:</p> WindowsLinux <pre><code>cd server\ncall start.bat\n</code></pre> <pre><code>cd server\n./start.sh\n</code></pre>"},{"location":"commands/cache/","title":"<code>mcman cache</code>","text":"<p>Provides some utilities for managing your local cache directory.</p>"},{"location":"commands/cache/#mcman-cache-path","title":"<code>mcman cache path</code>","text":"<p>Prints the cache path. This is generally:</p> <ul> <li>Windows: <code>%LocalAppData%/mcman</code></li> <li>Linux: <code>~/.cache/mcman</code></li> </ul>"},{"location":"commands/cache/#mcman-cache-open","title":"<code>mcman cache open</code>","text":"<p>Opens the cache folder using a file explorer</p>"},{"location":"commands/cache/#mcman-cache-list","title":"<code>mcman cache list</code>","text":"<p>Lists the cache entries.</p> <pre><code>$ mcman cache list\nListing cache...\nFolder: C:\\Users\\dennis\\AppData\\Local\\mcman\n=&gt; github - 24 entries\n=&gt; modrinth - 278 entries\n=&gt; papermc - 1 entries\n303 entries in 3 namespaces in total\n</code></pre> Detailed listing <p>You can use the <code>-d</code> flag to get a more detailed list</p> <pre><code>$ mcman cache list -d\nListing cache...\nFolder: C:\\Users\\dennis\\AppData\\Local\\mcman\n=&gt; github - 8 entries\n    \u2514 emilyploszaj\n    \u2514 EngineHub\n    \u2514 LemmaEOF\n    \u2514 MerchantPug\n    \u2514 ModFest\n    \u2514 NucleoidMC\n    \u2514 Patbox\n    \u2514 TheEpicBlock\n=&gt; modrinth - 10 entries\n    \u2514 10DZYVis\n    \u2514 13RpG7dA\n    \u2514 14Z3YVAP\n    \u2514 1cjUVbYD\n    \u2514 1eAoo2KR\n    \u2514 1IjD5062\n    \u2514 1itdse3V\n    \u2514 1LrBk5C6\n    \u2514 1qeWG44Y\n    \u2514 2qcCxsBR\n=&gt; papermc - 1 entries\n    \u2514 paper\n19 entries in 3 namespaces in total\n</code></pre>"},{"location":"commands/cache/#mcman-cache-clear","title":"<code>mcman cache clear</code>","text":""},{"location":"commands/dev/","title":"<code>mcman dev</code>","text":"<p>Starts a development session</p>"},{"location":"commands/env/","title":"<code>mcman env &lt;gitignore/docker&gt;</code>","text":"<p>Configure environment things.</p>"},{"location":"commands/env/#mcman-env-gitignore","title":"<code>mcman env gitignore</code>","text":"<p>Adds some ignore items in your repository's <code>.gitignore</code></p> <p><code>git</code> should be installed and you should be in a repository for this to work</p>"},{"location":"commands/env/#mcman-env-docker","title":"<code>mcman env docker</code>","text":"<p>Write the default Dockerfile and .dockerignore</p>"},{"location":"commands/export/","title":"<code>mcman export ...</code>","text":"<p>Exporting commands</p>"},{"location":"commands/export/#mcman-export-mrpack-filename","title":"<code>mcman export mrpack [filename]</code>","text":"<p>Export the server as an <code>mrpack</code> (modrinth modpack) file</p> <p>If <code>[filename]</code> argument isn't given, it will be exported as <code>${SERVER_NAME}.mrpack</code></p> <p>See also: special variables that contain export-related variables</p>"},{"location":"commands/export/#mcman-export-packwiz","title":"<code>mcman export packwiz</code>","text":"<p>Alias &amp; Full Command: <code>mcman export pw [-o --output &lt;FOLDER&gt;] [--cfcdn]</code></p> <p>Export the server as a packwiz pack, by default to <code>pack/</code> folder.</p> <p>If you are in a git repo, mcman will give you the githack url to the generated <code>pack.toml</code> at the end of the export.</p> Extra options (output &amp; cfcdn) <p>You can use the <code>--output &lt;folder&gt;</code> option to set a custom destination to the pack.</p> <p>Using <code>mcman export pw --output packwiz/pack</code> will create <code>pack.toml</code> to <code>./packwiz/pack/pack.toml</code></p> <p>If the <code>--cfcdn</code> flag is used, every <code>curserinth</code> downloadable will use <code>download.mode = \"url\"</code> with <code>download.url</code> being the url from curseforge's cdn.</p> <p>If its not used, <code>download.mode = \"metadata:curseforge\"</code> is used with <code>update.curseforge = { .. }</code> (default packwiz behavior)</p> <p>See also: special variables that contain export-related variables</p>"},{"location":"commands/import/","title":"<code>mcman import ...</code>","text":"<p>Alias: <code>mcman i ...</code></p> <p>Commands related to importing</p>"},{"location":"commands/import/#mcman-import-url-url","title":"<code>mcman import url &lt;URL&gt;</code>","text":"<p>Imports a plugin or a mod from a url.</p> <p>Supports:</p> <ul> <li><code>[cdn.]modrinth.com</code></li> <li><code>curserinth.kuylar.dev</code></li> <li><code>www.curseforge.com</code></li> <li><code>www.spigotmc.org</code></li> <li><code>github.com</code></li> <li>If not any of those, will prompt with direct url or jenkins</li> </ul> <p>Example usages:</p> <pre><code>mcman import url https://modrinth.com/plugin/imageframe\nmcman import url https://www.spigotmc.org/resources/armorstandeditor-reborn.94503/\nmcman import url https://ci.athion.net/job/FastAsyncWorldEdit/\n</code></pre>"},{"location":"commands/import/#mcman-import-datapack-url","title":"<code>mcman import datapack &lt;URL&gt;</code>","text":"<p>Like import url, but imports as a datapack rather than a plugin or a mod.</p> <p>Example usage:</p> <pre><code># datapack alias is dp\nmcman import dp https://modrinth.com/plugin/tectonic\n</code></pre>"},{"location":"commands/import/#mcman-import-mrpack-src","title":"<code>mcman import mrpack &lt;src&gt;</code>","text":"<p>Imports a mrpack file (modrinth modpacks)</p> <p>Note: <code>mcman init</code> supports mrpacks</p> <p>The source can be:</p> <ul> <li>A direct URL to a <code>.mrpack</code> file</li> <li>A local file path</li> <li>Modpack URL (<code>https://modrinth.com/modpack/{id}</code>)</li> <li>Modrinth project id prefixed with <code>mr:</code></li> </ul> <p>Example usages:</p> <pre><code># direct link\nmcman import mrpack https://cdn.modrinth.com/data/xldzprsQ/versions/xWFqQBjM/Create-Extra-full-1.1.0.mrpack\n# only /modpack urls\nmcman import mrpack https://modrinth.com/modpack/create-extra\n# prefixed\nmcman import mrpack mr:simply-skyblock\n# local file\nmcman import mrpack My-Pack.mrpack\n</code></pre>"},{"location":"commands/import/#mcman-import-packwiz-src","title":"<code>mcman import packwiz &lt;src&gt;</code>","text":"<p>Alias: <code>mcman i pw &lt;src&gt;</code></p> <p>Imports a packwiz pack</p> <p>Note</p> <p><code>mcman init</code> supports initializing with packwiz</p> <p>The source can be:</p> <ul> <li>A packwiz pack URL</li> <li>A local file path to <code>pack.toml</code></li> </ul> <p>Example usages:</p> <pre><code>mcman import packwiz https://raw.githack.com/ParadigmMC/mcman-example-quilt/main/pack/pack.toml\nmcman import packwiz ../pack.toml\n</code></pre>"},{"location":"commands/info/","title":"<code>mcman info</code>","text":"<p>Shows info about the server in the terminal.</p>"},{"location":"commands/init/","title":"<code>mcman init</code>","text":"<p>Initializes a new server in the current directory.</p> <p>This command is interactive. Just run <code>mcman init</code>!</p> <p>See the getting started tutorial for what to do next</p> <p>Full Command: <code>mcman init [--name &lt;name&gt;] [--mrpack &lt;source&gt; | --packwiz &lt;source&gt;]</code></p> \ud83d\udce6 Importing from a mrpack (modrinth modpack) <p>You can use the <code>--mrpack</code> flag on <code>mcman init</code> to import from an mrpack while initializing a server.</p> <ul> <li>If its from modrinth, like adrenaserver: <code>mcman init --mrpack mr:adrenaserver</code></li> </ul> <p>Use <code>mr:</code> and then the project id/slug of the modpack (should be visible on the url)</p> <ul> <li> <p>You can also just paste in the modpack page's url: <code>mcman init --mrpack https://modrinth.com/modpack/adrenaserver</code></p> </li> <li> <p>If its from another source, you can provide a download link to it: <code>mcman init --mrpack https://example.com/pack.mrpack</code></p> </li> <li> <p>If its a file: <code>mcman init --mrpack ../modpacks/pack.mrpack</code></p> </li> </ul> <p>If your server is already initialized, use the <code>mcman import mrpack &lt;source&gt;</code> command. The source argument also accepts the sources defined above.</p> <p>Example using Adrenaserver:</p> <pre><code># these are all identical\nmcman init --mrpack mr:adrenaserver\nmcman init --mrpack https://modrinth.com/modpack/adrenaserver\nmcman init --mrpack https://cdn.modrinth.com/data/H9OFWiay/versions/2WXUgVhc/Adrenaserver-1.4.0%2B1.20.1.quilt.mrpack\n</code></pre> \ud83d\udce6 Importing from a packwiz pack <p>You can use the <code>--packwiz</code> (alias <code>--pw</code>) flag on <code>mcman init</code> to import a packwiz pack while initializing.</p> <p>If the pack is in your filesystem:</p> <pre><code>mcman init --pw path/to/pack.toml\n</code></pre> <p>If the pack is online:</p> <pre><code>mcman init --pw https://raw.githack.com/EXAMPLE/EXAMPLE/main/pack.toml\n</code></pre> <p>If your server is already initialized, use the <code>mcman import packwiz &lt;source&gt;</code> command. The source argument also accepts the sources defined above.</p> I dont see a Dockerfile/.gitignore <p>If mcman can't detect a git repository, it wont write a <code>.gitignore</code></p> <p>The same applies for <code>Dockerfile</code> when <code>docker --version</code> fails.</p> <p>You can use <code>mcman env</code> to get those files.</p>"},{"location":"commands/markdown/","title":"<code>mcman markdown</code>","text":"<p>Alias: <code>mcman md</code></p> <p>This command refreshes the markdown files defined in the server.toml files with the templates.</p> <p>See markdown options for more information.</p>"},{"location":"commands/pull/","title":"<code>mcman pull &lt;file&gt;</code>","text":"<p>'Pulls' a file from <code>server/</code> to <code>config/</code></p> <p>Example usage:</p> <pre><code>~/smp $ ls\n ...\n server.toml\n ...\n\n~/smp $ cd server/config/SomeMod\n\n~/smp/server/config/SomeMod $ mcman pull config.txt\n  server/config/SomeMod/config.txt =&gt; config/config/SomeMod/config.txt\n</code></pre>"},{"location":"commands/run/","title":"<code>mcman run</code>","text":"<p>See here for more info</p> <p>Supports the same arguments as mcman build</p> <p>Builds the server and runs it. This is kind of the same as running <code>mcman build &amp;&amp; cd server &amp;&amp; start</code></p>"},{"location":"commands/run/#mcman-run-test","title":"<code>mcman run --test</code>","text":"<p>You can use the <code>--test</code> option to test if your server works. mcman will build and run the server and see if it fully starts up. If it crashes, stops, or doesnt succeed, mcman will report the issue and exit with code <code>1</code>.</p> <p>If <code>options.upload_to_mclogs</code> is <code>true</code> in <code>server.toml</code>, mcman will upload <code>latest.log</code> and the crash log (if it crashed) to mclo.gs and print the URL to the console.</p> <p>You can use CI/CD to test if your server works. For example, this is a github workflow that tests if the BlanketCon 23 server boots up successfully.</p> <p>mcman's criteria for a \"successful boot\" is this line:</p> <pre><code>[12:57:24] [Server thread/INFO]: Done (5.290s)! For help, type \"help\"\n</code></pre>"},{"location":"commands/version/","title":"<code>mcman version</code>","text":"<p>Shows the version of mcman and checks if its up to date.</p>"},{"location":"commands/world/","title":"<code>mcman world pack|unpack</code>","text":""},{"location":"commands/world/#mcman-world-unpack-world","title":"<code>mcman world unpack &lt;world&gt;</code>","text":"<p>Unpack</p>"},{"location":"reference/clientsidemod/","title":"ClientSideMod","text":"<p>This is basically a Downloadable of any type with some extra fields:</p> Name Type Description <code>optional</code> bool Marks if optional or not <code>desc</code> string Provide a description <p>These fields are used for exporting to mrpack or packwiz</p> <p>Example</p> server.toml<pre><code>[[clientsidemods]]\ntype = \"modrinth\"\nid = \"3dskinlayers\"\nversion = \"JHapWF9O\"\noptional = true\ndesc = \"It adds 3D skin layers :moyai:\"\n</code></pre>"},{"location":"reference/lockfile/","title":"Lockfile (<code>.mcman.lock</code>)","text":"<p>The lockfile, found under the output directory, is generated after every build. It's in the JSON format and contains metadata about the installed mods, plugins and last dates of config files.</p> <p>While it's primary purpose is to be a cache and speed up building, it also makes sure that the removed mods/plugins from the <code>server.toml</code> file also get their jar files deleted.</p>"},{"location":"reference/lockfile/#disabling","title":"Disabling","text":"<p>See Options/Disabling lockfiles</p>"},{"location":"reference/lockfile/#format","title":"Format","text":"<pre><code>type Lockfile = {\nplugins: [Downloadable, ResolvedFile][],\nmods: [Downloadable, ResolvedFile][],\nfiles: BootstrappedFile[],\n}\ntype BootstrappedFile = {\npath: string,\ndate: number, // timestamp\n}\n</code></pre>"},{"location":"reference/markdown-options/","title":"Markdown Options","text":"<p>Ever wanted to display all of the mods or plugins your server has? Using <code>mcman</code> you can do that!</p> <p>If you havent added it, add your markdown file's name (<code>README.md</code> for example) into the <code>markdown.files</code> list. When the <code>mcman markdown</code> command is run, mcman will render every template in the listed files.</p> <p>Fields:</p> Name Type Description <code>files</code> string[] List of filenames to 'render' <code>auto_update</code> bool If set to <code>true</code>, markdown files will be rendered on commands that modify <code>server.toml</code> server.toml<pre><code>[markdown]\nfiles = [\n\"README.md\",\n\"PLUGINS.md\",\n]\nauto_update = false\n</code></pre> <p>Warning</p> <p>If <code>auto_update = true</code>, commands might take longer. We recommend you dont turn it on until you're done adding most of the mods/plugins.</p>"},{"location":"reference/markdown-options/#markdown-templates","title":"Markdown Templates","text":"<p>These are the templates mcman will render inside your markdown files. When <code>mcman markdown</code> runs, the files specified in <code>server.toml</code> will be read and the templates below will be updated with the rendered markdown code. You can have as many markdown files or templates as you want.</p>"},{"location":"reference/markdown-options/#server-info-table","title":"Server Info Table","text":"<p>This template renders a table with server jar info.</p> README.md<pre><code>&lt;!--start:mcman-server--&gt;\n... content ...\n&lt;!--end:mcman-server--&gt;\n</code></pre> <p>Example render:</p> Version Type Build 1.20.1 Paper Latest"},{"location":"reference/markdown-options/#addons-list","title":"Addons List","text":"<p>This template renders a list of addons (plugins or mods)</p> README.md<pre><code>&lt;!--start:mcman-addons--&gt;\n... content ...\n&lt;!--end:mcman-addons--&gt;\n</code></pre> <p>Example render:</p> Name Description BlueMap A Minecraft mapping tool that creates 3D models of your Minecraft worlds and displays them in a web viewer. FastAsyncWorldEdit Blazingly fast world manipulation for artists, builders and everyone else"},{"location":"reference/server-launcher/","title":"Server Launcher","text":"<p>The <code>[launcher]</code> table lets mcman create launch scripts for you while running the build command.</p> <p>Default values aren't written back to config - except for <code>aikars_flags</code>, <code>proxy_flags</code> and <code>eula_args</code> which are always written.</p> Example ServerLauncher <pre><code>[launcher]\ndisable = false # (1)\n# (2)\njvm_args = \"-exampleidk\"\ngame_args = \"--world abc\"\naikars_flags = true # (3)\nproxy_flags = false # (4)\neula_args = true # (5)\nnogui = true # (6)\nmemory = \"2048M\" # (7)\n# (8)\n[launcher.properties]\nhello=\"thing\"\n</code></pre> <ol> <li>Disables generating launch scripts completely. <code>false</code> by default</li> <li>If needed, you can add custom arguments here. The format is <code>java [jvm_args] -jar server.jar [game_args]</code></li> <li>Use aikar's flags - these do optimizations, see flags.sh for more info</li> <li>Like aikar's, but for proxies (bungeecord, waterfall, velocity)</li> <li>Adds <code>-Dcom.mojang.eula.agree=true</code> - this flag exists in spigot/paper to ignore <code>eula.txt</code>. Writes to <code>eula.txt</code> when on fabric or quilt</li> <li>Adds <code>--nogui</code> to game args, disable if its a proxy server as they dont support it</li> <li>Specify <code>-Xmx</code>/<code>-Xms</code> (memory) for the server.</li> <li>A table of properties. This is the same as using    <pre><code>jvm_args = \"-Dhello=thing\"\n</code></pre></li> </ol> <p>Fields:</p> Name Type Description <code>disable</code> bool Disables script generation altogether <code>nogui</code> bool Adds <code>--nogui</code> at the end <code>aikars_flags</code> bool Use aikars flags flags.sh <code>proxy_flags</code> bool Use proxy flags flags.sh <code>jvm_args</code> string Custom jvm args (before <code>-jar serv.jar</code>) <code>game_args</code> string Custom game args (after <code>-jar serv.jar</code>) <code>memory</code> string How much memory to give (<code>-Xmx</code>/<code>-Xms</code>), example: <code>\"2048M\"</code> <code>properties</code> table sets <code>-D</code>-prefixed system property jvm args"},{"location":"reference/server.toml/","title":"Server (<code>server.toml</code>)","text":"<p>Each <code>server.toml</code> file defines a differient server.</p> <p>To generate one, you can use the <code>mcman init</code> command (see Getting Started)</p> <p>Note</p> <p>If you are in your server's sub-directories, mcman will be able to find the <code>server.toml</code> file recursively.</p> <pre><code>name = \"My SMP\"\nmc_version = \"1.20.1\"\n[jar]\ntype = \"purpur\"\n</code></pre>"},{"location":"reference/server.toml/#fields","title":"Fields","text":""},{"location":"reference/server.toml/#name-string","title":"<code>name</code>: String","text":"<p>The name field defines the name of the server. It's recommended to be alphanumeric because of the other features using this field.</p> <p>For example, to overwrite the <code>SERVER_PORT</code> variable, you can use the <code>PORT_name</code> environment variable where <code>name</code> is the server's name.</p> <p>The <code>SERVER_NAME</code> variable can be used to access this field.</p>"},{"location":"reference/server.toml/#mc_version-string","title":"<code>mc_version</code>: String","text":"<p>The mc_version field is used in many ways, most notably:</p> <ul> <li>Selecting the server jar</li> <li>Filtering addon versions</li> </ul> <p>This field can also be accessed using the <code>SERVER_VERSION</code>, <code>mcversion</code> or <code>mcver</code> variables.</p>"},{"location":"reference/server.toml/#jar-downloadable","title":"<code>jar</code>: Downloadable","text":""},{"location":"reference/server.toml/#launcher-server-launcher","title":"<code>launcher</code>: Server Launcher","text":"<p>This field is used to configure or disable the generated <code>start.bat</code> and <code>start.sh</code> scripts.</p> <p>The order of these arguments are:</p> <p><code>java [jvm_args] [memory] [preset] [eula] [properties] &lt;startup&gt; [nogui] [game_args]</code></p> <p>Where <code>startup</code> is either <code>-jar *.jar</code> or some library shenanigans (NeoForge/Forge require this).</p> <code>launcher.disable</code> <p>Set to <code>true</code> if you do not want <code>start.bat</code> or <code>start.sh</code> generated.</p> <code>launcher.eula_args</code> <p>Bukkit/Spigot forks such as Paper and Purpur all support the <code>-Dcom.mojang.eula.agree=true</code> flag which allows the agreement of eula without <code>eula.txt</code>. If this is set to true, mcman will add this flag to the arguments. If the server software does not support this argument, <code>eula=true</code> will be written to <code>eula.txt</code>. </p> <code>launcher.nogui</code> <p>Adds <code>--nogui</code> to the end</p> <code>launcher.preset_flags</code> <p>The preset flags to use. Available preset flags:</p> <ul> <li><code>aikars</code>: The famous Aikar's flags, mostly used by Paper-like servers but probably also effective in modded servers.</li> <li><code>proxy</code>: These flags were optimized for proxy servers such as bungeecord, waterfall or velocity.</li> <li><code>none</code>: (default) Dont use any preset flags</li> </ul> <p>These flags were generously borrowed from flags.sh</p> <code>launcher.java_version</code> <p>This field does not add any arguments to the startup command but rather helps mcman decide which java binary to use.</p> <pre><code>[launcher]\njava_version = \"17\"\n</code></pre> <p>See this section for more information.</p> <code>launcher.jvm_args</code> and <code>launcher.game_args</code> <p>These optional fields allow you to add your own custom arguments.</p> <code>launcher.memory</code> <p>If set, this controls the <code>-Xmx</code>/<code>-Xms</code> arguments. The value is the same as those arguments, for example:</p> <pre><code>[launcher]\nmemory = \"4G\"\n</code></pre> <p>However you can override this using the <code>MC_MEMORY</code> environment variable.</p> <code>launcher.properties</code> <p>This table allows you to write property arguments such as <code>-Dcom.mojang.eula.agree=true</code>:</p> <pre><code>[launcher.properties]\n\"com.mojang.eula.agree\" = \"true\"\n</code></pre>"},{"location":"reference/server.toml/#pluginsmods-downloadable","title":"<code>plugins</code>/<code>mods</code>: Downloadable[]","text":""},{"location":"reference/server.toml/#clientsidemods-clientsidemod","title":"<code>clientsidemods</code>: ClientSideMod[]","text":""},{"location":"reference/server.toml/#variables-table-of-strings","title":"<code>variables</code>: Table of Strings","text":""},{"location":"reference/server.toml/#worlds-table-of-string-to-world","title":"<code>worlds</code>: Table of String to World","text":""},{"location":"reference/server.toml/#markdown-markdown-options","title":"<code>markdown</code>: Markdown Options","text":""},{"location":"reference/server.toml/#options-server-options","title":"<code>options</code>: Server Options","text":"Name Type Description <code>name</code> string Name of the server <code>mc_version</code> string/<code>\"latest\"</code> The minecraft version of the server <code>jar</code> Downloadable Which server software to use <code>launcher</code> ServerLauncher Options for generating launch scripts <code>plugins</code> Downloadable[] A list of plugins to download <code>mods</code> Downloadable[] A list of mods to download <code>clientsidemods</code> ClientSideMod[] A list of client-side only mods, for packwiz/mrpack support <code>variables</code> table of string See variables section <code>worlds</code> table of World A table of worlds which may contain datapacks. The keys are the world names <code>markdown</code> MarkdownOptions Options for markdown files, see here for more info"},{"location":"reference/world/","title":"World","text":"<p>Added in v0.2.2</p> <p>Represents a world in your server. Currently only exists for datapack support.</p> <p>This is a simple type - it only contains a list of Downloadables.</p> <p>Worlds are indexed by their name in <code>server.toml</code>'s <code>worlds</code> table.</p> server.toml<pre><code>[worlds.skyblock]\ndatapacks = []\n</code></pre> <p>Fields:</p> Name Type Description <code>datapacks</code> Downloadable[] A list of datapacks to download for this world"},{"location":"reference/downloadable/","title":"Downloadable","text":"<p>A <code>Downloadable</code> is a plugin, mod, datapack or any other thing that is, downloadable.</p> <p>Downloadable types are used for downloading custom server jars, plugins, mods, client-side mods, datapacks and worlds.</p>"},{"location":"reference/downloadable/#shortcode-syntax","title":"Shortcode Syntax","text":"<p>For some arguments, you can also use the \"shortcode syntax\": <code>source:id[,version]</code></p> <p>Sources:</p> <ul> <li>Modrinth: <code>modrinth</code>, <code>mr</code></li> <li>Curserinth: <code>curserinth</code>, <code>cr</code>, <code>cf</code>, <code>curseforge</code></li> <li>Hangar: <code>hangar</code>, <code>h</code></li> <li>Github: <code>gh</code>, <code>ghrel</code>, <code>github</code></li> </ul>"},{"location":"reference/downloadable/#sources","title":"Sources","text":"<p>Please note that the <code>attributes</code> are not limitations.</p> <ul> <li>Modrinth - <code>mods</code>, <code>plugins</code> and <code>datapacks</code></li> <li>Spigot resources - <code>plugins</code></li> <li>CurseRinth, curseforge api - <code>mods</code></li> <li>Hangar - <code>plugins</code></li> <li>Github Releases - <code>*</code></li> <li>Jenkins - <code>*</code></li> <li>Maven - <code>*</code></li> <li>Custom URL - <code>*</code></li> </ul>"},{"location":"reference/downloadable/curserinth/","title":"CurseRinth","text":"<p>Downloads a mod from CurseRinth's API, which is basically curseforge</p> <p>Example</p> Downloads JustEnoughItems from Curseforge<pre><code>type = \"curserinth\"\nid = \"jei\"\nversion = \"4593548\"\n</code></pre> <p>Fields:</p> Name Type Description <code>type</code> <code>\"curserinth\"</code>/<code>\"cr\"</code> <code>id</code> string The slug or the id of the mod <code>version</code> string/<code>\"latest\"</code> The file id of the mod"},{"location":"reference/downloadable/custom-url/","title":"Custom URL","text":"<p>Download from a direct download link.</p> <p>Example</p> <pre><code>type = \"url\"\nurl = \"https://example.com/download/Example.jar\"\nfilename = \"example-mod.jar\" #(1)\n</code></pre> <ol> <li>Optionally define the filename, useful if it cannot be inferred from the url</li> </ol> <p>Fields:</p> Name Type Description <code>type</code> <code>\"url\"</code> <code>url</code> string URL to the file <code>filename</code> string? Optional filename if you dont like the name from the url <code>desc</code> string? Optional description (shown in markdown)"},{"location":"reference/downloadable/github-releases/","title":"Github Releases","text":"<p>Download something from GitHub Releases</p> <p>Example</p> <pre><code>type = \"ghrel\"\nrepo = \"ViaVersion/ViaVersion\"\ntag = \"4.7.0\"\nasset = \"ViaVersion-${tag}.jar\" #(1)!\n</code></pre> <ol> <li>The real asset name is <code>ViaVersion-4.7.0.jar</code>.</li> </ol> <p>Note</p> <p>The strings can contain variable syntax:</p> <ul> <li><code>${mcver}</code> or <code>${mcversion}</code> for the <code>mc_version</code> in server.toml (usable in <code>tag</code> and <code>asset</code>)</li> <li><code>${tag}</code>, <code>${release}</code> or <code>${version}</code> for the resolved github release version (usable in <code>asset</code>)</li> </ul> <p>Note</p> <p>For the <code>asset</code> field, its first checked if the given asset exists on the release. If it doesn't, it will pick the first asset whose filename contains the <code>asset</code> value</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"ghrel\"</code> <code>repo</code> string Repository with its owner, like <code>\"ParadigmMC/mcman\"</code> <code>tag</code> string/<code>\"latest\"</code> The 'tag' (version number in most cases) of the release <code>asset</code> string/<code>\"first\"</code> The name of the asset"},{"location":"reference/downloadable/hangar/","title":"Hangar","text":"<p>Downloads a plugin from Hangar</p> <p>Example</p> <pre><code>type = \"hangar\"\nid = \"kennytv/Maintenance\" #(1)!\nversion = \"latest\"\n</code></pre> <ol> <li>You can just use the project's slug here too</li> </ol> <p>Fields:</p> Name Type Description <code>type</code> <code>\"hangar\"</code> <code>id</code> string The slug/name of the project <code>version</code> string/<code>\"latest\"</code> Version name, <code>\"latest\"</code> to always use the latest version"},{"location":"reference/downloadable/jenkins/","title":"Jenkins","text":"<p>Download an artifact from a Jenkins server.</p> <p>Example</p> <p>Example using Scissors 1.20.1:</p> <pre><code>type = \"jenkins\"\nurl = \"https://ci.plex.us.org\"\njob = \"Scissors/1.20.1\"\n# (1)\nbuild = \"latest\"\nartifact = \"first\"\n</code></pre> <ol> <li>These are the default values and since they are optional, they can be removed.</li> </ol> <p>Info</p> <p>Nested jobs can be written using slashes. For example, if the URL was something like <code>/job/A/job/B</code>, the job field would be <code>A/B</code>.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"jenkins\"</code> <code>url</code> string URL to the Jenkins instance <code>job</code> string The job name <code>build</code> string/<code>\"latest\"</code> The build number to use <code>artifact</code> string/<code>\"first\"</code> The name of the artifact (checks for inclusion, like github releases)"},{"location":"reference/downloadable/maven/","title":"Maven","text":"<p>Added in 0.4.0</p> <p>Download from a Maven instance.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"maven\"</code> <code>url</code> string URL to the Maven instance <code>group</code> string The group, seperated with <code>.</code> <code>artifact</code> string The name of the artifact <code>version</code> string The version of the artifact <code>filename</code> string Filename to download <p>Note</p> <p>The strings can contain variable syntax:</p> <ul> <li><code>${mcver}</code> or <code>${mcversion}</code> for the <code>mc_version</code> in server.toml</li> <li><code>${artifact}</code> for the resolved artifact (in <code>version</code> or <code>filename</code>)</li> <li><code>${version}</code> for the resolved version (in <code>filename</code>)</li> </ul> <p>Note</p> <p>For the <code>version</code> field, its first checked if the given version exists on the artifact. If it doesn't, it will pick the first version that contains the contents of <code>version</code></p> <p>This is also true for the <code>filename</code> field</p> <p>For example:</p> <pre><code>Lets assume these are the versions and their files:\n\n- 1.19.4-1.0.0\n  - amongus-1.19.4.jar\n  - amongus-1.19.4-extra-sus.jar\n- 1.19.4-3.6.7\n  - 3.6.7.jar\n\nAnd that:\n- artifact: \"amongus\"\n</code></pre> <code>mc_version</code> maven <code>version</code> resolved version maven <code>filename</code> resolved filename <code>1.19.4</code> <code>${mcver}-1.0.0</code> <code>1.19.4-1.0.0</code> <code>${artifact}-${mcver}.jar</code> <code>amongus-1.19.4.jar</code> <code>1.19.4</code> <code>${mcver}</code> <code>1.19.4-1.0.0</code> <code>${artifact}-${mcver}-extr</code> <code>amongus-1.19.4-extra-sus.jar</code> <code>1.19.4</code> <code>${mcver}-3</code> <code>1.19.4-3.6.7</code> <code>${version}.jar</code> <code>3.6.7.jar</code>"},{"location":"reference/downloadable/modrinth/","title":"Modrinth","text":"<p>Downloads a mod, plugin or a datapack from Modrinth's API</p> <p>Example</p> <pre><code>type = \"modrinth\" #(1)!\nid = \"coreprotect\"\nversion = \"mvLpRWww\" #(2)!\n</code></pre> <ol> <li>You can also use <code>mr</code> as an alias</li> <li> <p>You can find the version in the url of the download link or the version page.</p> <p>The 'version number' is also accepted (since mcman 0.3.0)</p> </li> </ol> <p>Fields:</p> Name Type Description <code>type</code> <code>\"modrinth\"</code>/<code>\"mr\"</code> <code>id</code> string The slug or the ID of the project <code>version</code> string/<code>\"latest\"</code> Version ID or number, <code>\"latest\"</code> not recommended as of now"},{"location":"reference/downloadable/spigot/","title":"Spigot","text":"<p>Downloads a plugin from Spiget's API.</p> <p>You can find the ID of the resource in the URL:</p> <p><code>https://www.spigotmc.org/resources/luckperms.28140/</code></p> <p>In this case, luckperms has the id of <code>28140</code> - but you can paste it with the name too:</p> <p>Example</p> Download LuckPerms from spigot<pre><code>type = \"spigot\"\nid = \"luckperms.28140\"\n</code></pre> <p>Tip</p> <p>mcman will ignore everything before the dot in the <code>id</code> field. This helps with identifying the plugins and should be easier to just copy-paste the id from the URL.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"spigot\"</code> <code>id</code> string ID of the project"},{"location":"reference/servertype/","title":"Server Types","text":"<p>A server type is like a Downloadable but for server softwares.</p> <p>Downloadable Support</p> <p>The Server Type 'inherits' Downloadable meaning any valid Downloadable can be used as a Server Type</p>"},{"location":"reference/servertype/#index","title":"Index","text":"<ul> <li>Vanilla</li> <li>Quilt - <code>modded</code></li> <li>Fabric - <code>modded</code></li> <li>NeoForge - <code>modded</code></li> <li>Forge - <code>modded</code></li> <li>PaperMC<ul> <li>Paper <code>bukkit</code></li> <li>Velocity <code>proxy</code></li> <li>Waterfall <code>proxy</code></li> </ul> </li> <li>Purpur - <code>bukkit</code></li> <li>BungeeCord - <code>proxy</code></li> <li>BuildTools (spigot and craftbukkit) - <code>bukkit</code></li> <li>... any other Downloadable</li> </ul>"},{"location":"reference/servertype/buildtools/","title":"BuildTools","text":"<p>Setup Spigot or CraftBukkit using BuildTools.</p> <p>Note</p> <p><code>mcman</code> will need to run <code>java</code> to install the server, ensure it exists in the environment before building</p> <p>Example</p> <pre><code>type = \"buildtools\"\nsoftware = \"craftbukkit\"\n</code></pre> <p>Fields:</p> Name Type Description <code>type</code> <code>\"buildtools\"</code> <code>software</code> <code>\"spigot\"</code> or <code>\"craftbukkit\"</code> The software to compile <code>args</code> string[] Additional args. mcman already adds <code>--rev {mc_version}</code>"},{"location":"reference/servertype/bungeecord/","title":"BungeeCord","text":"<p>BungeeCord is just a shortcut to a jenkins downloadable:</p> <pre><code>type = \"bungeecord\"\n</code></pre> <p>Note</p> <p>If you'd like to get a specific build, use this:</p> <pre><code>type = \"jenkins\"\nurl = \"https://ci.md-5.net\"\njob = \"BungeeCord\"\nbuild = \"latest\" #(1)\nartifact = \"BungeeCord\"\n</code></pre> <ol> <li>Change this to the build id of your choosing</li> </ol>"},{"location":"reference/servertype/fabric/","title":"Fabric","text":"<p>Downloads the server jar from Fabric</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"fabric\"</code> <code>installer</code> string/<code>\"latest\"</code> Installer version to use <code>loader</code> string/<code>\"latest\"</code> Loader version to use <pre><code>type = \"fabric\"\ninstaller = \"latest\"\nloader = \"latest\"\n</code></pre>"},{"location":"reference/servertype/forge/","title":"Forge","text":"<p>Downloads the server jar from Forge</p> <p>Note</p> <p><code>mcman</code> will need to run <code>java</code> to install the server, ensure it exists in the environment before building</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"forge\"</code> <code>loader</code> string/<code>\"latest\"</code> Loader version to use <pre><code>type = \"forge\"\nloader = \"latest\"\n</code></pre>"},{"location":"reference/servertype/neoforge/","title":"NeoForge","text":"<p>Downloads the server jar from NeoForge</p> <p>Note</p> <p><code>mcman</code> will need to run <code>java</code> to install the server, ensure it exists in the environment before building</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"neoforge\"</code> <code>loader</code> string/<code>\"latest\"</code> Loader version to use <pre><code>type = \"neoforge\"\nloader = \"latest\"\n</code></pre>"},{"location":"reference/servertype/papermc/","title":"PaperMC","text":"<p>Downloads a PaperMC project.</p> <p>Example</p> PaperMC Downloadable<pre><code>type = \"papermc\"\nproject = \"waterfall\"\nbuild = \"17\"\n</code></pre> Shortcuts <p> There are also 3 shortcut Downloadable types:</p> <ul> <li><code>paper</code></li> <li><code>velocity</code></li> <li><code>waterfall</code></li> </ul> Example shortcut<pre><code>type = \"paper\"\n</code></pre> <p>Note</p> <p>The shortcuts dont support the <code>build</code> property. They are implicitly the latest build.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"papermc\"</code> <code>project</code> string The project name <code>build</code> string/<code>\"latest\"</code> Optionally provide the build id"},{"location":"reference/servertype/purpurmc/","title":"PurpurMC","text":"<p>Downloads the server jar from PurpurMC.</p> <p>Example</p> <pre><code>type = \"purpur\"\nbuild = \"10\" #(1)!\n</code></pre> <ol> <li>Defaults to <code>latest</code></li> </ol> <p>Fields:</p> Name Type Description <code>type</code> <code>\"purpur\"</code> <code>build</code> string/<code>\"latest\"</code> Optionally define the build id"},{"location":"reference/servertype/quilt/","title":"Quilt","text":"<p>Downloads Quilt installer and installs the quilt server.</p> <p>Note</p> <p><code>mcman</code> will need to run <code>java</code> to install the quilt server jar, ensure it exists in the environment before building</p> <p>Example</p> <pre><code>type = \"quilt\"\ninstaller = \"latest\"\nloader = \"latest\"\n</code></pre> <p>Fields:</p> Name Type Description <code>type</code> <code>\"quilt\"</code> <code>installer</code> string/<code>\"latest\"</code> Installer version to use <code>loader</code> string/<code>\"latest-beta\"</code>/<code>\"latest\"</code> Loader version to use"},{"location":"reference/servertype/vanilla/","title":"Vanilla","text":"<p>Used for a vanilla server jar. Has no properties because it only needs the server version, which would be defined in <code>mc_version</code> (<code>server.toml</code>)</p> <pre><code>type = \"vanilla\"\n</code></pre>"},{"location":"tutorials/building/","title":"Building, Running and Developing","text":"<p>After editing <code>server.toml</code> or writing configuration files to <code>config/</code>, you're probably going to want to run the server.</p> <p>mcman is not designed to handle running the server itself, but provides a <code>run</code> and a <code>dev</code> command which we'll explain later.</p>"},{"location":"tutorials/building/#building","title":"Building","text":"<p>To start the server, you need the files. The <code>.jar</code> files of the server, addons, and other stuff. We call the process of downloading, processing, copying etc. building.</p> <p>Building requires a valid server.toml file - thats it.</p> <p>To not conflict with everything else, the build output folder is by default the <code>server/</code> directory, next to <code>server.toml</code> and <code>config/</code>. This folder should already be <code>.gitignore</code>d by default.</p> <p>You can override the output directory with the <code>--output &lt;path&gt;</code> option, but this is not recommended.</p> <p>You can also skip some steps if you want using the <code>--skip</code>/<code>-s</code> option. Possible values are <code>plugins</code>, <code>mods</code>, <code>worlds</code> and <code>bootstrap</code>. If you need to skip multiple stages, stack them up like so: <code>-s mods -s worlds</code></p>"},{"location":"tutorials/building/#first-steps","title":"First steps","text":"<p><code>mcman</code> will try to load a lockfile if present before beginning the build. This is done to speed up build times and skip unnecesary things. (you can ignore this)</p> <p>First, mcman will download or install the server jar as defined in <code>server.toml</code>'s <code>jar</code> field.</p>"},{"location":"tutorials/building/#java","title":"Java","text":"<p>Some servers (quilt, forge, neoforge, spigot/bukkit) require java to be present while building. This is because those server types use an installer mechanism instead of providing a pre-built <code>server.jar</code> file that mcman can download.</p> <p>If the server type is one that requires installation, you can find the installer's output logs under the output directory. The file name is <code>.S.mcman.log</code> where <code>S</code> is a short identifier for the installer. (<code>qsi</code> for quilt, <code>bt</code> for buildtools, <code>fi</code> and <code>nfi</code> for forge/neoforge respectively)</p> <p>The installer must exit with a non-zero code or mcman considers it a fail and stops building the server.</p>"},{"location":"tutorials/building/#addons-plugins-and-mods","title":"Addons (plugins and mods)","text":"<p>Next, <code>mcman</code> will download all the addons according to <code>server.toml</code></p> <p>By default, most downloaded addons get cached in your local system. If a Downloadable is cached, mcman will copy it from cache instead of downloading it again.</p> <p>If possible, mcman will also do size/hash checks on both downloaded and copied/cached files.</p> <p>Every addon gets 3 attempts, but this can be overridden</p>"},{"location":"tutorials/building/#worlds","title":"Worlds","text":"<p>If there are any worlds specified in <code>server.toml</code>, they are processed.</p> <p>See Using Worlds to learn more about worlds in mcman.</p> <p>Datapacks are also downloaded similar to addons in this stage.</p>"},{"location":"tutorials/building/#bootstrapping","title":"Bootstrapping","text":"<p>See Variables aka Bootstrapping</p>"},{"location":"tutorials/building/#finishing-up","title":"Finishing up","text":"<p>Some last touches include:</p> <ul> <li>Generating <code>start.sh</code>/<code>start.bat</code> scripts</li> <li>Creating an <code>eula.txt</code> if <code>launcher.eula_args</code> is set to true and the server doesn't support the argument</li> </ul> <p>These can be disabled or configured further in <code>server.toml</code> </p>"},{"location":"tutorials/building/#running","title":"Running","text":"<p>The recommended approach is running the server on your own using something like Docker. But there is a way to make mcman run the server. The <code>mcman run</code> command first builds the server, then runs it.</p> <p>Tip</p> <p>The <code>mcman run</code> command accepts the options of <code>mcman build</code> too.</p> <p>Testing the server</p> <p>You can use the <code>--test</code> option to test if your server works. mcman will build and run the server and see if it fully starts up. If it crashes, stops, or doesnt succeed, mcman will report the issue and exit with code <code>1</code>.</p> <p>If <code>options.upload_to_mclogs</code> is <code>true</code> in <code>server.toml</code>, mcman will upload <code>latest.log</code> and the crash log (if it crashed) to mclo.gs and print the URL to the console.</p> <p>You can use CI/CD to test if your server works. For example, this is a github workflow that tests if the BlanketCon 23 server boots up successfully.</p>"},{"location":"tutorials/building/#developing","title":"Developing","text":"<p>Please see Development Sessions</p>"},{"location":"tutorials/caching/","title":"Caching","text":"<p>mcman will try to cache downloaded files and other metadata such as Github API requests.</p> <p>The cache folder will generally be:</p> <ul> <li>Windows: <code>%LocalAppData%/mcman</code></li> <li>Linux: <code>~/.cache/mcman</code></li> </ul> <p>You can also manage the cache using the <code>mcman cache</code> command.</p> <ul> <li><code>mcman cache path</code>: Prints the cache path</li> <li><code>mcman cache list</code>: Lists caches<ul> <li><code>-d</code> for detailed</li> </ul> </li> <li><code>mcman cache open</code>: Opens the cache folder using a file explorer</li> <li><code>mcman cache clear</code>: Clears the cache without confirmation</li> </ul>"},{"location":"tutorials/caching/#folders","title":"Folders","text":"<p>Most sources have their own folders:</p> <ul> <li>Modrinth: <code>modrinth/{project}/{version}/{file}</code></li> <li>Curserinth: <code>curserinth/{project}/{version}/{file}</code></li> <li>Github:<ul> <li>Metadata: <code>github/{owner}/{repo}/releases.json</code></li> <li>Releases: <code>github/{owner}/{repo}/releases/{tag}/{file}</code></li> </ul> </li> <li>Hangar: <code>hangar/{owner}/{proj}/{version}/{file}</code></li> <li>Jenkins: <code>jenkins/{url}/{...job}/{build}/{file}</code></li> <li>Maven: <code>maven/{url}/{...group}/{artifact}/{version}/{file}</code></li> <li>PaperMC: <code>papermc/{proj}/{proj}-{mcver}-{build}.jar</code></li> </ul>"},{"location":"tutorials/dev/","title":"Development Sessions (Hot reloading)","text":"<p>If you need to iterate on your server or its configuration files, this feature is for you. Hot reloading allows you to develop your server more efficiently.</p>"},{"location":"tutorials/dev/#how-to-use","title":"How to use","text":"<p>To start a development session, use the <code>mcman dev</code> command. This will first build your server then run it while also watching for file changes.</p> <p>While the development session is active, when you modify:</p> <ul> <li><code>server.toml</code> -&gt; Server gets rebuilt</li> <li><code>config/*</code> -&gt; File gets bootstrapped</li> <li><code>hotreload.toml</code> -&gt; Hot reload settings get reloaded</li> </ul>"},{"location":"tutorials/dev/#hotreloadtoml","title":"<code>hotreload.toml</code>","text":"<p>When a config file gets changed, after bootstrapping it, mcman will execute any action for the file defined in <code>hotreload.toml</code> if present.</p> <p>For example:</p> <pre><code>[[files]]\npath = \"server.properties\"\naction = \"reload\"\n</code></pre> <p>The path is a glob pattern.</p>"},{"location":"tutorials/dev/#hot-reload-actions","title":"Hot reload actions","text":"<p>There are currently 3 actions:</p> <ul> <li><code>reload</code> - Sends a reload command to the server</li> <li><code>restart</code> - Restarts the server process</li> <li><code>/...</code> - If the action starts with a <code>/</code>, it will get interpreted as a command to be sent.</li> </ul> <p>Example of the command action:</p> <pre><code>[[files]]\npath = \"plugins/examplePlugin/*\"\naction = \"/examplePlugin reload\"\n</code></pre>"},{"location":"tutorials/getting-started/","title":"Getting Started","text":"<p>Let's create a simple server as an example.</p>"},{"location":"tutorials/getting-started/#creating-a-new-server","title":"Creating a new server","text":"<p>Create a new folder for your server (or initialize a git repository), open up a terminal inside and run:</p> <pre><code>mcman init\n</code></pre> <p>This command will interactively help you set up a new server in the current directory.</p> <p></p> <p> Using git</p> <p><code>mcman</code> is fully git-compatible, meaning you can store, share and version control your server using a git repository provider such as  Github.</p> <p>This is optional, but recommended since you get many benefits such as rollbacks/backups, collaboration, branches, etc.</p> <p>When you run <code>init</code>, mcman will touch up your <code>.gitignore</code> and <code>.gitattributes</code></p>"},{"location":"tutorials/getting-started/#initializing-from-a-modpack","title":"Initializing from a modpack","text":"<p>You can check out the Importing Modpacks section on how to initialize from a modpack.</p>"},{"location":"tutorials/getting-started/#what-are-these-files","title":"What are these files?","text":"<p>After initializing the server, you'll notice a few things:</p> <code>server.toml</code> <p>This file is the core of your server configuration. It contains information about the server type, version, mods, plugins, worlds and more.</p> the <code>config/</code> directory <p>This folder will hold your config files for your Minecraft server, such as <code>server.properties</code></p> the <code>server/</code> directory <p>You might not see this folder immediately after initialization since it will be generated by <code>mcman</code> when you build the server. Everything, including the <code>jar</code> files, will be inside this directory.</p> <p>If you are using  git, you might notice that this folder is also ignored via <code>.gitignore</code>.</p>"},{"location":"tutorials/getting-started/#adding-addons","title":"Adding Addons","text":"<p>Lets add a plugin or a mod! For demonstration purposes, lets add Fabric API from Modrinth (mod) or Placeholder API (plugin).</p>"},{"location":"tutorials/getting-started/#a-adding-via-servertoml","title":"A: Adding via <code>server.toml</code>","text":"<p>Add a new entry in your <code>server.toml</code>:</p> <pre><code># For Fabric API\n[[mods]]\ntype = \"modrinth\"\nid = \"fabric-api\"\n</code></pre> <pre><code># For Placeholder API\n[[mods]]\ntype = \"spigot\"\nid = \"placeholderapi.6245\"\n</code></pre>"},{"location":"tutorials/getting-started/#b-adding-via-mcman-import","title":"B: Adding via <code>mcman import</code>","text":"<p>You can alternatively use the <code>mcman i url</code> command:</p> <pre><code>mcman import url https://modrinth.com/mod/fabric-api\nmcman import url https://www.spigotmc.org/resources/placeholderapi.6245/\n</code></pre>"},{"location":"tutorials/getting-started/#how-do-i-run-it","title":"How do I run it?","text":"<p><code>mcman</code> is not designed to run your server, but build it.</p> <p>Building is the process where <code>mcman</code> sets everything up for you. This includes downloading all the jars, unpacking worlds, processing config files etc. Before you can run the server, it first needs to be built.</p> <p>Let's build your server using the <code>mcman build</code> command:</p> <pre><code>mcman build\n</code></pre> <p>Then, you can run it using the <code>start.bat</code>/<code>start.sh</code> launch scripts inside the <code>server/</code> directory:</p> WindowsLinux <pre><code>cd server\ncall start\n</code></pre> <pre><code>cd server\n./start.sh\n</code></pre> <p>You can alternatively use <code>mcman run</code> to do both of those at once.</p>"},{"location":"tutorials/getting-started/#going-further","title":"Going Further","text":"Format for addons <p>You can check out the documentation about Downloadables</p> Configuration files and the <code>config/</code> directory <p>Read on how the <code>config/</code> directory works and how you can use it to manage your server's configuration files with ease: Variables and Bootstrapping</p> Developing your server <p><code>mcman</code> includes a Hot-reloading feature where your changes to <code>server.toml</code>/<code>config/</code> are automatically applied. For more information, read Development Sessions</p> More in-depth explanation of Building <p>To learn more about how building works, see Building, Running and Developing</p>"},{"location":"tutorials/importing-modpacks/","title":"Importing Modpacks","text":"<p><code>mcman</code> can import from the mrpack format (modrinth modpacks) or packwiz packs.</p> Can I import after initializing? <p>Yes you can!</p> <ul> <li>For mrpacks: <code>mcman import mrpack &lt;source&gt;</code></li> <li>For packwiz packs: <code>mcman import packwiz &lt;source&gt;</code></li> </ul> <p>The source arguments are the same</p>"},{"location":"tutorials/importing-modpacks/#mrpack","title":"mrpack","text":"<p>You can import mrpacks with the <code>--mrpack</code> flag while initializing:</p> <pre><code>mcman init --mrpack &lt;source&gt;\n</code></pre> <p>The <code>source</code> argument can be</p> <ul> <li>An URL to a direct download of the <code>.mrpack</code> file</li> <li>A local path to the <code>.mrpack</code> file</li> <li>A modpack from Modrinth prefixed with \"<code>mr:</code>\"<ul> <li>For example, the modpack Packed would be written as \"<code>mr:packed</code>\"</li> </ul> </li> </ul>"},{"location":"tutorials/importing-modpacks/#packwiz","title":"packwiz","text":"<p>Like mrpacks, you can import while initializing with:</p> <pre><code>mcman init --packwiz &lt;source&gt;\n</code></pre> <p>The <code>source</code> argument can be</p> <ul> <li>An URL with <code>http</code>/<code>https</code> scheme</li> <li>Path to a local <code>pack.toml</code> file</li> </ul>"},{"location":"tutorials/importing-modpacks/#whats-next","title":"Whats next?","text":"<p>Tutorial -&gt; Getting Started -&gt; Building</p>"},{"location":"tutorials/network/","title":"Networks","text":"<p>If you want to manage multiple servers at once like a network, you can use <code>network.toml</code>:</p> <pre><code>name = \"CoolNetwork\"\nport = 25565\n</code></pre>"},{"location":"tutorials/network/#servers","title":"Servers","text":"<p>In <code>network.toml</code>, define servers in the <code>servers</code> table:</p> <pre><code>name = \"CoolNetwork\"\nport = 25565\n[servers.lobby]\nport = 25566\n[servers.game1]\nport = 25567\n</code></pre> <p>In the folder structure, keep the servers under the <code>servers/</code> folder:</p> <pre><code>cool_network\n\u251c\u2500 network.toml\n\u2514\u2500 servers/\n\u251c\u2500 lobby\n\u2502  \u2514\u2500 server.toml\n\u2514\u2500 game1\n\u2514\u2500 server.toml\n</code></pre> <p>If needed, you can optionally define <code>ip_address</code> in servers. This is <code>\"127.0.0.1\"</code> by default.</p> <p>At the moment, most of these rules aren't used or enforced, but kept in here so other tools could be created around this.</p>"},{"location":"tutorials/network/#variables","title":"Variables","text":"<p>Just like the normal <code>server.toml</code> variables, you can define custom variables in <code>network.toml</code>:</p> <pre><code>[variables]\nSOME = \"thing\"\n</code></pre> <p>Network variables need to be prefixed with <code>NW_</code> while accessing them.</p> <p>So instead of using <code>${SOME}</code> to access it, <code>${NW_SOME}</code> can be used.</p>"},{"location":"tutorials/network/#special-variables","title":"Special Variables","text":"<p>Here are some more special variables.</p> <p>Note</p> <p>You can use the <code>PORT_name</code> and <code>IP_name</code> environment variables to override server ip addresses and ports. The <code>name</code> must be the name of the server as defined in <code>server.toml</code>.</p> <ul> <li><code>SERVER_IP</code>: the IP address of the server</li> <li><code>SERVER_PORT</code>: the port of the server</li> <li><code>NETWORK_NAME</code>: name of the network</li> <li><code>NETWORK_PORT</code>: the defined port</li> <li><code>NETWORK_SERVERS_COUNT</code>: amount of servers defined</li> </ul> <p>You can also get the port or IP of another server via</p> <ul> <li><code>NW_SERVER_name_IP</code></li> <li><code>NW_SERVER_name_PORT</code></li> <li><code>NW_SERVER_name_ADDRESS</code>: Basically \"ip:port\"</li> </ul> <p>These generate a table of servers that can be used in proxy server configurations:</p> <ul> <li><code>NETWORK_VELOCITY_SERVERS</code> for Velocity</li> <li><code>NETWORK_BUNGEECORD_SERVERS</code> for BungeeCord/Waterfall</li> </ul> Usage in VelocityUsage in BungeeCord <pre><code>#${NETWORK_VELOCITY_SERVERS}\n</code></pre> <pre><code>#${NETWORK_BUNGEECORD_SERVERS}\n</code></pre> <p>You can comment the line because it will start with a comment/disclaimer.</p>"},{"location":"tutorials/options/","title":"Options/Misc","text":"<p>Here are some misc. options of mcman</p>"},{"location":"tutorials/options/#setting-the-java-binary","title":"Setting the Java binary","text":"<p>If you want <code>mcman</code> to use a custom java binary, you can set the environment variable <code>JAVA_BIN</code> to its path.</p> <p>For servers that have the <code>launcher.java_version</code> field set, mcman will try to use the <code>JAVA_*_BIN</code> environment first before <code>JAVA_BIN</code>.</p> <p>For example, for</p> <pre><code>[launcher]\njava_version = \"16\"\n</code></pre> <p><code>mcman</code> will first check for <code>JAVA_16_BIN</code>, then <code>JAVA_BIN</code> and if both aren't set, <code>\"java\"</code> will be used as default.</p>"},{"location":"tutorials/options/#disabling-lockfiles","title":"Disabling lockfiles","text":"<p>To disable Lockfiles, you can set the <code>MCMAN_DISABLE_LOCKFILE</code> environment variable to <code>true</code>.</p>"},{"location":"tutorials/options/#addon-download-attempts","title":"Addon download attempts","text":"<p>By default, addons get 3 tries to be downloaded. To change this, set the <code>MAX_TRIES</code> environment variable to the max amount of tries. For example, set it to <code>1</code> if you want <code>mcman</code> to try only once.</p>"},{"location":"tutorials/options/#overriding-server-ports-in-networks","title":"Overriding server ports in networks","text":"<p>See the note on this section</p>"},{"location":"tutorials/using-worlds/","title":"Using Worlds","text":"<p>mcman can help you manage your server's worlds. You can make mcman download a world or keep the world under the <code>worlds/</code> directory.</p> <p>Worlds are defined in <code>server.toml</code> under the <code>worlds</code> table. The key of the table is the world name. For example, the world with name 'city' would be <code>worlds.city</code>.</p>"},{"location":"tutorials/using-worlds/#downloading-worlds","title":"Downloading Worlds","text":"<p>If you set the <code>download</code> field to a Downloadable mcman will download the world zip file and unzip it if the world does not exist in the output directory.</p> <pre><code>[worlds.earth.download]\ntype = \"url\"\nurl = \"https://example.com/cdn/worlds/earth.zip\"\n</code></pre>"},{"location":"tutorials/using-worlds/#the-worlds-folder","title":"The <code>worlds/</code> Folder","text":"<p>Optionally, you can store your worlds under the <code>worlds/</code> folder.</p> <pre><code>worlds\n\u251c\u2500 lobby.zip\n\u2514\u2500 arena.zip\n</code></pre> <p>When building, if the world does not exist in the output directory, mcman will unzip the world file located in the <code>worlds/</code> folder.</p> <p>Note</p> <p>For your world to be unpacked, there needs to be a world entry in <code>server.toml</code> for it:</p> <pre><code>[worlds.city]\n# just the entry is enough\n</code></pre> <p>You can also manually unpack a world using the <code>mcman unpack &lt;world&gt;</code> command.</p>"},{"location":"tutorials/variables/","title":"Variables and Bootstrapping","text":"<p>In <code>server.toml</code>, you can define variables like so:</p> <pre><code>[variables]\nhello = \"world\"\n# define variables here\n</code></pre> <p>When you build your server, any config file with common extensions (<code>yml</code>, <code>json</code>, <code>toml</code>, <code>txt</code> etc.) will be bootstrapped - their contents will be replaced with variables using the variable syntax.</p> <p>Bootstrapping is essentially copying the file and doing a complex find-and-replace.</p> <p>The syntax for variables are <code>${name}</code> where <code>name</code> is the name of the variable. A colon can be used to set a default value: <code>${MOTD:Hi, im a Minecraft Server!}</code></p> Using environment variables <p>If your variables are sensitive (such as discord bot tokens) you can use environment variables:</p> LinuxWindows <pre><code>export TOKEN=asdf\n</code></pre> <pre><code>set TOKEN=asdf\n</code></pre> <p>Environment variables can be accessed just like other variables.</p>"},{"location":"tutorials/variables/#examples","title":"Examples","text":"<p>Environment variable: <code>TOKEN=asdf</code></p> <p><code>server.toml</code></p> <pre><code>name = \"funnies\"\n[variables]\nPORT = \"25500\"\nMOTD = \"welcome to funnies\"\nWEBSITE = \"https://example.com/\"\nPrefix = \"[funnies]\"\n</code></pre> <p><code>server.properties</code></p> \ud83d\udcdc config/server.properties\u27a1\ufe0f server/server.properties <pre><code>server-port=${PORT:25565}\ngamemode=creative\nmotd=${MOTD}\nonline-mode=false\n</code></pre> <pre><code>server-port=25500\ngamemode=creative\nmotd=welcome to funnies\nonline-mode=false\n</code></pre> <p><code>plugins/someplugin/config.yml</code></p> \ud83d\udcdc config/...\u27a1\ufe0f server/... <pre><code>bossbar: \"${SERVER_NAME} - ${WEBSITE}\"\nmessages:\nno_permissions: ${Prefix} You do not have the permissions.\ntoken: ${TOKEN}\n</code></pre> <pre><code>bossbar: \"funnies - https://example.com/\"\nmessages:\nno_permissions: [funnies] You do not have the permissions.\ntoken: asdf\n</code></pre>"},{"location":"tutorials/variables/#network-variables","title":"Network Variables","text":"<p>See Networks/Variables for more info.</p>"},{"location":"tutorials/variables/#special-variables","title":"Special Variables","text":"<p>There are some special variables:</p> <ul> <li><code>SERVER_NAME</code>: <code>name</code> property from <code>server.toml</code></li> <li><code>SERVER_VERSION</code>: <code>mc_version</code> property from <code>server.toml</code></li> <li><code>SERVER_PORT</code> and <code>SERVER_IP</code>: See Networks/Variables</li> <li><code>PLUGIN_COUNT</code>/<code>MOD_COUNT</code>: the number of plugins or mods</li> <li><code>WORLD_COUNT</code>: the number of defined worlds</li> <li><code>CLIENTSIDE_MOD_COUNT</code>: the number of client-side mods</li> </ul> <p>There are also some special variables for networks which can be found here</p> <p>When exporting to mrpack or packwiz, these variables from <code>server.toml</code> are used:</p> Variable Name mrpack - <code>modrinth.index.json</code> packwiz - <code>pack.toml</code> <code>MODPACK_NAME</code> <code>name</code> <code>name</code> <code>MODPACK_SUMMARY</code> <code>summary</code> <code>description</code> <code>MODPACK_AUTHORS</code> nothing <code>author</code> <code>MODPACK_VERSION</code> nothing <code>version</code> <p>:3</p>"}]}