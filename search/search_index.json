{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mcman","text":"<p>mcman is a command line tool that makes it easier to create and manage minecraft servers. Instead of manually downloading jars from the internet and doing intricate replace operations and whatnot on your plugin configuration files, mcman downloads everything you need from one configuration file (<code>server.toml</code>) and handles your config files with one very useful feature - variables.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li>Installation</li> <li>Getting Started</li> <li>Explaining how building works</li> <li>Commands</li> <li>Reference</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Downloads or sets up server software (server.jar)</li> <li>Downloads plugins, mods and datapacks</li> <li>Provides a better way to manage configuration files</li> <li>Gives you the ability to use variables from both the config file and environment variables inside your server's mod/plugin configuration files</li> <li>Supports many sources to download from (13)</li> <li>Your source isn't supported? Just use a custom url</li> <li>Import from URL</li> <li>Import from mrpacks or packwiz packs</li> <li>Export to mrpacks or packwiz packs</li> <li>Supports Jenkins.</li> <li>Rendering server info to markdown feature</li> <li>Docker support</li> </ul>"},{"location":"#todo","title":"TODO","text":"<ul> <li>Maven support, also allowing Forge and NeoForge</li> <li>Curseforge Modpack support</li> <li>Better commands to search, add or remove mods/plugins/datapacks</li> </ul>"},{"location":"installation/","title":"Installation","text":"Github ReleasesWindows: scoopLinux: wget <p>You can use the links below to get the mcman executable.</p> <p> Windows  OSX/Linux</p> <p> Github Releases Page  Build Action (nightly)</p> <p>We suggest you to add it to your <code>PATH</code> so you can run it from anywhere! (windows)</p> <p>Add the minecraft bucket and install mcman:</p> <pre><code>scoop bucket add minecraft https://github.com/The-Simples/scoop-minecraft\nscoop install mcman\n</code></pre> <p>Scoop is a command-line installer for Windows. You can use 2 commands in powershell to install it. (4 commands in total to install mcman!)</p> <p>wget</p> Install mcman<pre><code>wget https://github.com/ParadigmMC/mcman/releases/latest/download/mcman\nsudo mv ./mcman /usr/bin/\nsudo chmod +x /usr/bin/mcman\n</code></pre> <p>bottom text</p>"},{"location":"commands/","title":"CLI Commands","text":"<p>This section shows the commands of mcman. You can type <code>mcman</code>, <code>mcman help</code> or <code>mcman --help</code> for a basic list of it.</p>"},{"location":"commands/#cheatsheet","title":"Cheatsheet","text":"<ul> <li><code>mcman init</code></li> <li><code>mcman init --mrpack &lt;source&gt;</code></li> <li><code>mcman init --packwiz &lt;source&gt;</code></li> <li><code>mcman build</code></li> <li><code>mcman build --force</code></li> <li><code>mcman run</code></li> <li><code>mcman run --test</code></li> <li><code>mcman markdown</code></li> <li><code>mcman pull &lt;file&gt;</code></li> <li><code>mcman info</code></li> <li><code>mcman import url &lt;url&gt;</code></li> <li><code>mcman import datapack &lt;url&gt;</code></li> <li><code>mcman import packwiz &lt;source&gt;</code></li> <li><code>mcman import mrpack &lt;source&gt;</code></li> <li><code>mcman export packwiz [pack folder]</code></li> <li><code>mcman export mrpack [filename.mrpack]</code></li> <li><code>mcman env gitignore</code></li> <li><code>mcman env docker</code></li> <li><code>mcman version</code></li> </ul>"},{"location":"commands/build/","title":"<code>mcman build</code>","text":"<p>See here for more info</p> Extra flags (output, skip, force) <p>You can alternatively set the output folder manually using <code>--output &lt;path&gt;</code> option.</p> <p>The <code>--force</code> flag can be used to disable checking if files exist, effectively forcefully downloading everything.</p> <p>You can use the <code>--skip &lt;stages&gt;</code> flag to skip stages.</p> <ul> <li>Stages should be comma-seperated, like <code>--skip bootstrap,scripts,dp</code></li> <li>The stages are: <code>serverjar</code>, <code>plugins</code>, <code>mods</code>, <code>dp</code> (datapacks), <code>bootstrap</code> (config/) and <code>scripts</code></li> </ul> <p>After building, you can start the server with the launch scripts if theyre not disabled:</p> WindowsLinux <pre><code>cd server\ncall start.bat\n</code></pre> <pre><code>cd server\n./start.sh\n</code></pre>"},{"location":"commands/env/","title":"<code>mcman env &lt;gitignore/docker&gt;</code>","text":"<p>Configure environment things.</p>"},{"location":"commands/env/#mcman-env-gitignore","title":"<code>mcman env gitignore</code>","text":"<p>Adds some ignore items in your repository's <code>.gitignore</code></p> <p><code>git</code> should be installed and you should be in a repository for this to work</p>"},{"location":"commands/env/#mcman-env-docker","title":"<code>mcman env docker</code>","text":"<p>Write the default Dockerfile and .dockerignore</p>"},{"location":"commands/export/","title":"<code>mcman export ...</code>","text":"<p>Exporting commands</p>"},{"location":"commands/export/#mcman-export-mrpack-filename","title":"<code>mcman export mrpack [filename]</code>","text":"<p>Export the server as an <code>mrpack</code> (modrinth modpack) file</p> <p>If <code>[filename]</code> argument isn't given, it will be exported as <code>${SERVER_NAME}.mrpack</code></p> <p>See also: special variables that contain export-related variables</p>"},{"location":"commands/export/#mcman-export-packwiz","title":"<code>mcman export packwiz</code>","text":"<p>Alias &amp; Full Command: <code>mcman export pw [-o --output &lt;FOLDER&gt;] [--cfcdn]</code></p> <p>Export the server as a packwiz pack, by default to <code>pack/</code> folder.</p> <p>If you are in a git repo, mcman will give you the githack url to the generated <code>pack.toml</code> at the end of the export.</p> Extra options (output &amp; cfcdn) <p>You can use the <code>--output &lt;folder&gt;</code> option to set a custom destination to the pack.</p> <p>Using <code>mcman export pw --output packwiz/pack</code> will create <code>pack.toml</code> to <code>./packwiz/pack/pack.toml</code></p> <p>If the <code>--cfcdn</code> flag is used, every <code>curserinth</code> downloadable will use <code>download.mode = \"url\"</code> with <code>download.url</code> being the url from curseforge's cdn.</p> <p>If its not used, <code>download.mode = \"metadata:curseforge\"</code> is used with <code>update.curseforge = { .. }</code> (default packwiz behavior)</p> <p>See also: special variables that contain export-related variables</p>"},{"location":"commands/import/","title":"<code>mcman import ...</code>","text":"<p>Alias: <code>mcman i ...</code></p> <p>Commands related to importing</p>"},{"location":"commands/import/#mcman-import-url-url","title":"<code>mcman import url &lt;URL&gt;</code>","text":"<p>Imports a plugin or a mod from a url.</p> <p>Supports:</p> <ul> <li><code>[cdn.]modrinth.com</code></li> <li><code>curserinth.kuylar.dev</code></li> <li><code>www.curseforge.com</code></li> <li><code>www.spigotmc.org</code></li> <li><code>github.com</code></li> <li>If not any of those, will prompt with direct url or jenkins</li> </ul> <p>Example usages:</p> <pre><code>mcman import url https://modrinth.com/plugin/imageframe\nmcman import url https://www.spigotmc.org/resources/armorstandeditor-reborn.94503/\nmcman import url https://ci.athion.net/job/FastAsyncWorldEdit/\n</code></pre>"},{"location":"commands/import/#mcman-import-datapack-url","title":"<code>mcman import datapack &lt;URL&gt;</code>","text":"<p>Like import url, but imports as a datapack rather than a plugin or a mod.</p> <p>Example usage:</p> <pre><code># datapack alias is dp\nmcman import dp https://modrinth.com/plugin/tectonic\n</code></pre>"},{"location":"commands/import/#mcman-import-mrpack-src","title":"<code>mcman import mrpack &lt;src&gt;</code>","text":"<p>Imports a mrpack file (modrinth modpacks)</p> <p>Note: <code>mcman init</code> supports mrpacks</p> <p>The source can be:</p> <ul> <li>A direct URL to a <code>.mrpack</code> file</li> <li>A local file path</li> <li>Modpack URL (<code>https://modrinth.com/modpack/{id}</code>)</li> <li>Modrinth project id prefixed with <code>mr:</code></li> </ul> <p>Example usages:</p> <pre><code># direct link\nmcman import mrpack https://cdn.modrinth.com/data/xldzprsQ/versions/xWFqQBjM/Create-Extra-full-1.1.0.mrpack\n# only /modpack urls\nmcman import mrpack https://modrinth.com/modpack/create-extra\n# prefixed\nmcman import mrpack mr:simply-skyblock\n# local file\nmcman import mrpack My-Pack.mrpack\n</code></pre>"},{"location":"commands/import/#mcman-import-packwiz-src","title":"<code>mcman import packwiz &lt;src&gt;</code>","text":"<p>Alias: <code>mcman i pw &lt;src&gt;</code></p> <p>Imports a packwiz pack</p> <p>Note</p> <p><code>mcman init</code> supports initializing with packwiz</p> <p>The source can be:</p> <ul> <li>A packwiz pack URL</li> <li>A local file path to <code>pack.toml</code></li> </ul> <p>Example usages:</p> <pre><code>mcman import packwiz https://raw.githack.com/ParadigmMC/mcman-example-quilt/main/pack/pack.toml\nmcman import packwiz ../pack.toml\n</code></pre>"},{"location":"commands/info/","title":"<code>mcman info</code>","text":"<p>Shows info about the server in the terminal.</p>"},{"location":"commands/init/","title":"<code>mcman init</code>","text":"<p>Initializes a new server in the current directory.</p> <p>This command is interactive. Just run <code>mcman init</code>!</p> <p>See the getting started tutorial for what to do next</p> <p>Full Command: <code>mcman init [--name &lt;name&gt;] [--mrpack &lt;source&gt; | --packwiz &lt;source&gt;]</code></p> \ud83d\udce6 Importing from a mrpack (modrinth modpack) <p>You can use the <code>--mrpack</code> flag on <code>mcman init</code> to import from an mrpack while initializing a server.</p> <ul> <li>If its from modrinth, like adrenaserver: <code>mcman init --mrpack mr:adrenaserver</code></li> </ul> <p>Use <code>mr:</code> and then the project id/slug of the modpack (should be visible on the url)</p> <ul> <li> <p>You can also just paste in the modpack page's url: <code>mcman init --mrpack https://modrinth.com/modpack/adrenaserver</code></p> </li> <li> <p>If its from another source, you can provide a download link to it: <code>mcman init --mrpack https://example.com/pack.mrpack</code></p> </li> <li> <p>If its a file: <code>mcman init --mrpack ../modpacks/pack.mrpack</code></p> </li> </ul> <p>If your server is already initialized, use the <code>mcman import mrpack &lt;source&gt;</code> command. The source argument also accepts the sources defined above.</p> <p>Example using Adrenaserver:</p> <pre><code># these are all identical\nmcman init --mrpack mr:adrenaserver\nmcman init --mrpack https://modrinth.com/modpack/adrenaserver\nmcman init --mrpack https://cdn.modrinth.com/data/H9OFWiay/versions/2WXUgVhc/Adrenaserver-1.4.0%2B1.20.1.quilt.mrpack\n</code></pre> \ud83d\udce6 Importing from a packwiz pack <p>You can use the <code>--packwiz</code> (alias <code>--pw</code>) flag on <code>mcman init</code> to import a packwiz pack while initializing.</p> <p>If the pack is in your filesystem:</p> <pre><code>mcman init --pw path/to/pack.toml\n</code></pre> <p>If the pack is online:</p> <pre><code>mcman init --pw https://raw.githack.com/EXAMPLE/EXAMPLE/main/pack.toml\n</code></pre> <p>If your server is already initialized, use the <code>mcman import packwiz &lt;source&gt;</code> command. The source argument also accepts the sources defined above.</p> I dont see a Dockerfile/.gitignore <p>If mcman can't detect a git repository, it wont write a <code>.gitignore</code></p> <p>The same applies for <code>Dockerfile</code> when <code>docker --version</code> fails.</p> <p>You can use <code>mcman env</code> to get those files.</p>"},{"location":"commands/markdown/","title":"<code>mcman markdown</code>","text":"<p>Alias: <code>mcman md</code></p> <p>This command refreshes the markdown files defined in the server.toml files with the templates.</p> <p>See markdown options for more information.</p>"},{"location":"commands/pull/","title":"<code>mcman pull &lt;file&gt;</code>","text":"<p>'Pulls' a file from <code>server/</code> to <code>config/</code></p> <p>Example usage:</p> <pre><code>~/smp $ ls\n ...\n server.toml\n ...\n\n~/smp $ cd server/config/SomeMod\n\n~/smp/server/config/SomeMod $ mcman pull config.txt\n  server/config/SomeMod/config.txt =&gt; config/config/SomeMod/config.txt\n</code></pre>"},{"location":"commands/run/","title":"<code>mcman run</code>","text":"<p>Added in 0.3.0</p> <p>See here for more info</p> <p>Supports the same arguments as mcman build</p> <p>Builds the server and runs it. This is kind of the same as running <code>mcman build &amp;&amp; cd server &amp;&amp; start</code></p> <p>Abstract</p> <p>This command can be used to test if everything works.</p> <p>To test, use <code>mcman run --test</code></p> <p>When mcman sees something like this in the console <pre><code>[12:57:24] [Server thread/INFO]: Done (5.290s)! For help, type \"help\"\n</code></pre> It will mark the test as succeeded unless the server process exits with a non-zero code.</p> <p>If a test passes, mcman will exit with 0.</p>"},{"location":"commands/version/","title":"<code>mcman version</code>","text":"<p>Shows the version of mcman and checks if its up to date.</p>"},{"location":"reference/clientsidemod/","title":"ClientSideMod","text":"<p>This is basically a Downloadable of any type with some extra fields:</p> Name Type Description <code>optional</code> bool Marks if optional or not <code>desc</code> string Provide a description <p>These fields are used for exporting to mrpack or packwiz</p> <p>Example</p> server.toml<pre><code>[[clientsidemods]]\ntype = \"modrinth\"\nid = \"3dskinlayers\"\nversion = \"JHapWF9O\"\noptional = true\ndesc = \"It adds 3D skin layers :moyai:\"\n</code></pre>"},{"location":"reference/markdown-options/","title":"Markdown Options","text":"<p>Ever wanted to display all of the mods or plugins your server has? Using <code>mcman</code> you can do that!</p> <p>If you havent added it, add your markdown file's name (<code>README.md</code> for example) into the <code>markdown.files</code> list. When the <code>mcman markdown</code> command is run, mcman will render every template in the listed files.</p> <p>Fields:</p> Name Type Description <code>files</code> string[] List of filenames to 'render' <code>auto_update</code> bool If set to <code>true</code>, markdown files will be rendered on commands that modify <code>server.toml</code> server.toml<pre><code>[markdown]\nfiles = [\n\"README.md\",\n\"PLUGINS.md\",\n]\nauto_update = false\n</code></pre> <p>Warning</p> <p>If <code>auto_update = true</code>, commands might take longer. We recommend you dont turn it on until you're done adding most of the mods/plugins.</p>"},{"location":"reference/markdown-options/#markdown-templates","title":"Markdown Templates","text":"<p>These are the templates mcman will render inside your markdown files. When <code>mcman markdown</code> runs, the files specified in <code>server.toml</code> will be read and the templates below will be updated with the rendered markdown code. You can have as many markdown files or templates as you want.</p>"},{"location":"reference/markdown-options/#server-info-table","title":"Server Info Table","text":"<p>This template renders a table with server jar info.</p> README.md<pre><code>&lt;!--start:mcman-server--&gt;\n... content ...\n&lt;!--end:mcman-server--&gt;\n</code></pre> <p>Example render:</p> Version Type Build 1.20.1 Paper Latest"},{"location":"reference/markdown-options/#addons-list","title":"Addons List","text":"<p>This template renders a list of addons (plugins or mods)</p> README.md<pre><code>&lt;!--start:mcman-addons--&gt;\n... content ...\n&lt;!--end:mcman-addons--&gt;\n</code></pre> <p>Example render:</p> Name Description BlueMap A Minecraft mapping tool that creates 3D models of your Minecraft worlds and displays them in a web viewer. FastAsyncWorldEdit Blazingly fast world manipulation for artists, builders and everyone else"},{"location":"reference/server-launcher/","title":"Server Launcher","text":"<p>The <code>[launcher]</code> table lets mcman create launch scripts for you while running the build command.</p> <p>Default values aren't written back to config - except for <code>aikars_flags</code>, <code>proxy_flags</code> and <code>eula_args</code> which are always written.</p> Example ServerLauncher <pre><code>[launcher]\ndisable = false # (1)\n# (2)\njvm_args = \"-exampleidk\"\ngame_args = \"--world abc\"\naikars_flags = true # (3)\nproxy_flags = false # (4)\neula_args = true # (5)\nnogui = true # (6)\nmemory = \"2048M\" # (7)\n# (8)\n[launcher.properties]\nhello=\"thing\"\n</code></pre> <ol> <li>Disables generating launch scripts completely. <code>false</code> by default</li> <li>If needed, you can add custom arguments here. The format is <code>java [jvm_args] -jar server.jar [game_args]</code></li> <li>Use aikar's flags - these do optimizations, see flags.sh for more info</li> <li>Like aikar's, but for proxies (bungeecord, waterfall, velocity)</li> <li>Adds <code>-Dcom.mojang.eula.agree=true</code> - this flag exists in spigot/paper to ignore <code>eula.txt</code>. Writes to <code>eula.txt</code> when on fabric or quilt</li> <li>Adds <code>--nogui</code> to game args, disable if its a proxy server as they dont support it</li> <li>Specify <code>-Xmx</code>/<code>-Xms</code> (memory) for the server.</li> <li>A table of properties. This is the same as using    <pre><code>jvm_args = \"-Dhello=thing\"\n</code></pre></li> </ol> <p>Fields:</p> Name Type Description <code>disable</code> bool Disables script generation altogether <code>nogui</code> bool Adds <code>--nogui</code> at the end <code>aikars_flags</code> bool Use aikars flags flags.sh <code>proxy_flags</code> bool Use proxy flags flags.sh <code>jvm_args</code> string Custom jvm args (before <code>-jar serv.jar</code>) <code>game_args</code> string Custom game args (after <code>-jar serv.jar</code>) <code>memory</code> string How much memory to give (<code>-Xmx</code>/<code>-Xms</code>), example: <code>\"2048M\"</code> <code>properties</code> table sets <code>-D</code>-prefixed system property jvm args"},{"location":"reference/server.toml/","title":"server.toml","text":"<p>This section is for the <code>server.toml</code> configuration file.</p> <p>Each <code>server.toml</code> defines a differient server.</p> <p>To generate one, you can use the <code>mcman init</code> command (Tutorial)</p> <p>Note</p> <p>If you are in your server's sub-directories, mcman will be able to find the <code>server.toml</code> file recursively.</p> Example server.toml<pre><code>name = \"My SMP\"\nmc_version = \"1.20.1\"\n[jar]\ntype = \"purpur\"\n</code></pre> <p>Fields:</p> Name Type Description <code>name</code> string Name of the server <code>mc_version</code> string/<code>\"latest\"</code> The minecraft version of the server <code>jar</code> Downloadable Which server software to use <code>launcher</code> ServerLauncher Options for generating launch scripts <code>plugins</code> Downloadable[] A list of plugins to download <code>mods</code> Downloadable[] A list of mods to download <code>clientsidemods</code> ClientSideMod[] A list of client-side only mods, for packwiz/mrpack support <code>variables</code> table of string See variables section <code>worlds</code> table of World A table of worlds which may contain datapacks. The keys are the world names <code>markdown</code> MarkdownOptions Options for markdown files, see here for more info"},{"location":"reference/world/","title":"World","text":"<p>Added in v0.2.2</p> <p>Represents a world in your server. Currently only exists for datapack support.</p> <p>This is a simple type - it only contains a list of Downloadables.</p> <p>Worlds are indexed by their name in <code>server.toml</code>'s <code>worlds</code> table.</p> server.toml<pre><code>[worlds.skyblock]\ndatapacks = []\n</code></pre> <p>Fields:</p> Name Type Description <code>datapacks</code> Downloadable[] A list of datapacks to download for this world"},{"location":"reference/downloadable/","title":"Downloadable","text":"<p>A <code>Downloadable</code> is a plugin, mod, datapack or any other thing that is, downloadable.</p>"},{"location":"reference/downloadable/#sources","title":"Sources","text":"<ul> <li>Modrinth - <code>mods</code>, <code>plugins</code> and <code>datapacks</code></li> <li>Spigot resources - <code>plugins</code></li> <li>CurseRinth, curseforge api - <code>mods</code></li> <li>Github Releases - <code>*</code></li> <li>Jenkins - <code>*</code></li> <li>Custom URL - <code>*</code></li> </ul>"},{"location":"reference/downloadable/curserinth/","title":"CurseRinth","text":"<p>Downloads a mod from CurseRinth's API, which is basically curseforge</p> <p>Example</p> Downloads JustEnoughItems from Curseforge<pre><code>type = \"curserinth\"\nid = \"jei\"\nversion = \"4593548\"\n</code></pre> <p>Fields:</p> Name Type Description <code>type</code> <code>\"curserinth\"</code>/<code>\"cr\"</code> <code>id</code> string The slug or the id of the mod <code>version</code> string/<code>\"latest\"</code> The file id of the mod"},{"location":"reference/downloadable/custom-url/","title":"Custom URL","text":"<p>Download from a direct download link.</p> <p>Example</p> <pre><code>type = \"url\"\nurl = \"https://example.com/download/Example.jar\"\nfilename = \"example-mod.jar\" #(1)\n</code></pre> <ol> <li>Optionally define the filename, useful if it cannot be inferred from the url</li> </ol> <p>Fields:</p> Name Type Description <code>type</code> <code>\"url\"</code> <code>url</code> string URL to the file <code>filename</code> string? Optional filename if you dont like the name from the url <code>desc</code> string? Optional description (shown in markdown)"},{"location":"reference/downloadable/github-releases/","title":"Github Releases","text":"<p>Download something from GitHub Releases</p> <p>Example</p> <pre><code>type = \"ghrel\"\nrepo = \"ViaVersion/ViaVersion\"\ntag = \"4.7.0\"\nasset = \"ViaVersion\" #(1)!\n</code></pre> <ol> <li>The real asset name is <code>ViaVersion-4.7.0.jar</code>.</li> </ol> <p>Note</p> <p>mcman checks for inclusion for the <code>asset</code> field, so the first asset with its filename containing <code>asset</code> (<code>\"ViaVersion\"</code> in the above example) will get downloaded. Use <code>\"first\"</code> to use the first asset which should be enough for most releases.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"ghrel\"</code> <code>repo</code> string Repository with its owner, like <code>\"ParadigmMC/mcman\"</code> <code>tag</code> string/<code>\"latest\"</code> The 'tag' (version number in most cases) of the release <code>asset</code> string/<code>\"first\"</code> The name of the asset (checks for inclusion)"},{"location":"reference/downloadable/jenkins/","title":"Jenkins","text":"<p>Download an artifact from a Jenkins server.</p> <p>Example</p> <p>Example using Scissors 1.20.1:</p> <pre><code>type = \"jenkins\"\nurl = \"https://ci.plex.us.org\"\njob = \"Scissors/1.20.1\"\n# (1)\nbuild = \"latest\"\nartifact = \"first\"\n</code></pre> <ol> <li>These are the default values and since they are optional, they can be removed.</li> </ol> <p>Info</p> <p>Nested jobs can be written using slashes. For example, if the URL was something like <code>/job/A/job/B</code>, the job field would be <code>A/B</code>.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"jenkins\"</code> <code>url</code> string URL to the Jenkins instance <code>job</code> string The job name <code>build</code> string/<code>\"latest\"</code> The build number to use <code>artifact</code> string/<code>\"first\"</code> The name of the artifact (checks for inclusion, like github releases)"},{"location":"reference/downloadable/modrinth/","title":"Modrinth","text":"<p>Downloads a mod, plugin or a datapack from Modrinth's API</p> <p>Example</p> <pre><code>type = \"modrinth\" #(1)!\nid = \"coreprotect\"\nversion = \"mvLpRWww\" #(2)!\n</code></pre> <ol> <li>You can also use <code>mr</code> as an alias</li> <li> <p>You can find the version in the url of the download link or the version page.</p> <p>The 'version number' is also accepted (since mcman 0.3.0)</p> </li> </ol> <p>Fields:</p> Name Type Description <code>type</code> <code>\"modrinth\"</code>/<code>\"mr\"</code> <code>id</code> string The slug or the ID of the project <code>version</code> string/<code>\"latest\"</code> Version ID or number, <code>\"latest\"</code> not recommended as of now"},{"location":"reference/downloadable/spigot/","title":"Spigot","text":"<p>Downloads a plugin from Spiget's API.</p> <p>You can find the ID of the resource in the URL:</p> <p><code>https://www.spigotmc.org/resources/luckperms.28140/</code></p> <p>In this case, luckperms has the id of <code>28140</code> - but you can paste it with the name too:</p> <p>Example</p> Download LuckPerms from spigot<pre><code>type = \"spigot\"\nid = \"luckperms.28140\"\n</code></pre> <p>Tip</p> <p>mcman will ignore everything before the dot in the <code>id</code> field. This helps with identifying the plugins and should be easier to just copy-paste the id from the URL.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"spigot\"</code> <code>id</code> string ID of the project"},{"location":"reference/servertype/","title":"Server Type","text":"<p>A server type is like a Downloadable but for server softwares.</p> <p>Downloadable Support</p> <p>The Server Type 'inherits' Downloadable meaning any valid Downloadable can be used as a Server Type</p>"},{"location":"reference/servertype/#index","title":"Index","text":"<ul> <li>Vanilla</li> <li>Fabric - <code>modded</code></li> <li>Quilt - <code>modded</code></li> <li>PaperMC<ul> <li>Paper <code>bukkit</code></li> <li>Velocity <code>proxy</code></li> <li>Waterfall <code>proxy</code></li> </ul> </li> <li>Purpur - <code>bukkit</code></li> <li>BungeeCord - <code>proxy</code></li> <li>BuildTools (spigot and craftbukkit) - <code>bukkit</code></li> <li>... any other Downloadable</li> </ul>"},{"location":"reference/servertype/buildtools/","title":"BuildTools","text":"<p>Setup Spigot or CraftBukkit using BuildTools.</p> <p>Example</p> <pre><code>type = \"buildtools\"\nsoftware = \"craftbukkit\"\n</code></pre> <p>Fields:</p> Name Type Description <code>type</code> <code>\"buildtools\"</code> <code>software</code> <code>\"spigot\"</code> or <code>\"craftbukkit\"</code> The software to compile <code>args</code> string[] Additional args. mcman already adds <code>--rev {mc_version}</code>"},{"location":"reference/servertype/bungeecord/","title":"BungeeCord","text":"<p>BungeeCord is just a shortcut to a jenkins downloadable:</p> <pre><code>type = \"bungeecord\"\n</code></pre> <p>Note</p> <p>If you'd like to get a specific build, use this:</p> <pre><code>type = \"jenkins\"\nurl = \"https://ci.md-5.net\"\njob = \"BungeeCord\"\nbuild = \"latest\" #(1)\nartifact = \"BungeeCord\"\n</code></pre> <ol> <li>Change this to the build id of your choosing</li> </ol>"},{"location":"reference/servertype/fabric/","title":"Fabric","text":"<p>Downloads the server jar from Fabric</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"fabric\"</code> <code>installer</code> string/<code>\"latest\"</code> Installer version to use <code>loader</code> string/<code>\"latest\"</code> Loader version to use <pre><code>type = \"fabric\"\ninstaller = \"latest\"\nloader = \"latest\"\n</code></pre>"},{"location":"reference/servertype/papermc/","title":"PaperMC","text":"<p>Downloads a PaperMC project.</p> <p>Example</p> PaperMC Downloadable<pre><code>type = \"papermc\"\nproject = \"waterfall\"\nbuild = \"17\"\n</code></pre> Shortcuts <p> There are also 3 shortcut Downloadable types:</p> <ul> <li><code>paper</code></li> <li><code>velocity</code></li> <li><code>waterfall</code></li> </ul> Example shortcut<pre><code>type = \"paper\"\n</code></pre> <p>Note</p> <p>The shortcuts dont support the <code>build</code> property. They are implicitly the latest build.</p> <p>Fields:</p> Name Type Description <code>type</code> <code>\"papermc\"</code> <code>project</code> string The project name <code>build</code> string/<code>\"latest\"</code> Optionally provide the build id"},{"location":"reference/servertype/purpurmc/","title":"PurpurMC","text":"<p>Downloads the server jar from PurpurMC.</p> <p>Example</p> <pre><code>type = \"purpur\"\nbuild = \"10\" #(1)!\n</code></pre> <ol> <li>Defaults to <code>latest</code></li> </ol> <p>Fields:</p> Name Type Description <code>type</code> <code>\"purpur\"</code> <code>build</code> string/<code>\"latest\"</code> Optionally define the build id"},{"location":"reference/servertype/quilt/","title":"Quilt","text":"<p>Downloads Quilt installer and installs the quilt server.</p> <p>Note</p> <p><code>mcman</code> will need to run <code>java</code> to install the quilt server jar, ensure it exists in the environment before building</p> <p>Example</p> <pre><code>type = \"quilt\"\ninstaller = \"latest\"\nloader = \"latest\"\n</code></pre> <p>Fields:</p> Name Type Description <code>type</code> <code>\"quilt\"</code> <code>installer</code> string/<code>\"latest\"</code> Installer version to use <code>loader</code> string/<code>\"latest-beta\"</code>/<code>\"latest\"</code> Loader version to use"},{"location":"reference/servertype/vanilla/","title":"Vanilla","text":"<p>Used for a vanilla server jar. Has no properties because it only needs the server version, which would be defined in <code>mc_version</code> (<code>server.toml</code>)</p> <pre><code>type = \"vanilla\"\n</code></pre>"},{"location":"tutorials/building/","title":"Understanding Building","text":"<p>Building is the process of... basically building the entire server.</p> <p>Before everything else, building requires a server.toml. Check out the getting started tutorial if you dont have one.</p> <p>Before everything, mcman will create a <code>server/</code> directory to download everything into if it doesnt exist.</p>"},{"location":"tutorials/building/#1-server-jar","title":"1. Server Jar","text":"<p>First, mcman will download the server jar. And if neccesary (quilt and buildtools) will run the installer.</p>"},{"location":"tutorials/building/#2-pluginsmods","title":"2. Plugins/Mods","text":"<p>In this stage, mcman downloads every mod and plugin defined in the <code>server.toml</code>.</p>"},{"location":"tutorials/building/#3-datapacks","title":"3. Datapacks","text":"<p>Like plugins and mods, if there are any, mcman will download every datapack for every world that exists</p>"},{"location":"tutorials/building/#4-configurations-bootstrapping","title":"4. Configurations (Bootstrapping)","text":"<p>In this stage, mcman will 'bootstrap' your configuration files - which is a fancy synonim for \"copy, paste, find and replace\"</p> <p>You can check the variables section for more info</p>"},{"location":"tutorials/building/#5-scripts","title":"5. Scripts","text":"<p>Finally, mcman generates <code>start.bat</code> and <code>start.sh</code> scripts. These can be disabled and configured further under <code>server.toml</code> (docs here)</p>"},{"location":"tutorials/folder-structure/","title":"Understanding the Folder Structure","text":"<p>In a normal server environment, everything is in one folder and a big giant mess to navigate. And database files are next to config files!</p> <p>When using <code>mcman</code>, your folder structure will look something like this:</p> <pre><code>cool_server\n\u251c\u2500 server.toml\n\u251c\u2500 config/\n\u2502  \u2514\u2500 ...\n\u2514\u2500 server/ #(1)!\n\u2514\u2500 ...\n</code></pre> <ol> <li>This folder should be inside <code>.gitignore</code>, so you shouldn't see it in most Github repositories.</li> </ol> <p>Inside the folder for your server ('cool_server' in this case), you'll see a few files and folders:</p>"},{"location":"tutorials/folder-structure/#servertoml","title":"<code>server.toml</code>","text":"<p>This is the configuration file for your server. It contains useful metadata such as:</p> <ul> <li>What software the server runs on</li> <li>What mods or plugins it has</li> <li>Additional worlds with datapacks or client-side mods</li> <li>Launcher and markdown configurations</li> </ul> <p>These are all can be found under this section in the reference.</p>"},{"location":"tutorials/folder-structure/#config-directory","title":"config/ Directory","text":"<p>Your server's configuration files which you have overridden (edited) should all be here.</p> <p>When building, mcman uses this folder to create the server's configuration files while also using the server's variables</p>"},{"location":"tutorials/folder-structure/#server-directory","title":"server/ Directory","text":"<p>This is the 'output' file. It will contain all of the server files including the server jar file after every build.</p>"},{"location":"tutorials/folder-structure/#other","title":"Other","text":"<ul> <li><code>client-config/</code> folder can be used like <code>config/</code> to add client-side config overrides. This folder is processed while exporting to <code>.mrpack</code> or <code>packwiz</code> - it does nothing while building.</li> <li><code>.gitignore</code> is the default gitignore file generated by mcman. if you need it and dont have it, you can use <code>mcman env gitignore</code></li> <li><code>.dockerignore</code> &amp; <code>Dockerfile</code> are the default docker files. like gitignore you can use <code>mcman env docker</code></li> </ul>"},{"location":"tutorials/getting-started/","title":"Getting Started","text":"<p>Let's create a simple server as an example.</p>"},{"location":"tutorials/getting-started/#initial-setup","title":"Initial Setup","text":"<p>Since mcman is git-compatible, you can create a new Github Repository to put your server configuration files in. This is optional but recommended.</p> <p>Create a new folder (or clone your repository) for your server and <code>cd</code> into it.</p> <p>Then inside your server folder, run <code>mcman init</code></p> <p></p> <p>It will interactively allow you to set up a basic <code>server.toml</code> file.</p> <p>Whats a <code>server.toml</code> file????</p> <p>When using mcman, a <code>server.toml</code> file is some kind of metadata file containing neccesary information about it. For example, it contains the server name, version, plugins/mods and more.</p> <p>Want to import from a modpack?</p> <p>mcman supports importing from some modpack formats (<code>mrpack</code> and <code>packwiz</code>)</p> <p>See this section to see how</p>"},{"location":"tutorials/getting-started/#building","title":"Building","text":"<p>Now, lets 'build' and run the server!</p> <ul> <li>If you want to run it yourself, use <code>mcman build</code> <code>&amp;&amp; cd server</code> and run the <code>start.{bat,sh}</code> script.</li> <li>Orrr you can just do <code>mcman run</code> which does both for you.</li> </ul>"},{"location":"tutorials/getting-started/#bootstrapping","title":"Bootstrapping","text":"<p>If you open the newly generated <code>config/server.properties</code> file, you'll see something like this:</p> config/server.properties<pre><code>server-port=${PORT:25565}\nmotd=${SERVER_NAME:A Minecraft Server}\n</code></pre> <p>If you run <code>mcman build</code>, you should see a <code>server.properties</code> file inside the <code>server/</code> folder too.</p> <p>If you open that file, inside <code>server/</code>, you'll see that it contains these two lines:</p> server/server.properties<pre><code>server-port=25565\nmotd=mcman-example-quilt\n</code></pre> <p>As you can guess, when running <code>mcman build</code>, mcman will process configuration files inside <code>config/</code> and copy them over to <code>server/</code> alongside downloading the server jar/plugins/mods and such.</p> <p>For more information, check out the Variables section :3</p>"},{"location":"tutorials/getting-started/#adding-plugins-or-mods","title":"Adding Plugins or Mods","text":"<p>For now, you can use the <code>mcman import url &lt;URL&gt;</code> command to import mods or plugins from URLs.</p> <p>Or alternatively write and edit the <code>server.toml</code> yourself to add it. You can check out the reference for the Downloadable type which is basically a mod/plugin source.</p>"},{"location":"tutorials/importing-modpacks/","title":"Importing Modpacks","text":"<p><code>mcman</code> can import from the mrpack format (modrinth modpacks) or packwiz packs.</p> Can I import after initializing? <p>Yes you can!</p> <ul> <li>For mrpacks: <code>mcman import mrpack &lt;source&gt;</code></li> <li>For packwiz packs: <code>mcman import packwiz &lt;source&gt;</code></li> </ul> <p>The source arguments are the same</p>"},{"location":"tutorials/importing-modpacks/#mrpack","title":"mrpack","text":"<p>You can import mrpacks with the <code>--mrpack</code> flag while initializing:</p> <pre><code>mcman init --mrpack &lt;source&gt;\n</code></pre> <p>The <code>source</code> argument can be</p> <ul> <li>An URL to a direct download of the <code>.mrpack</code> file</li> <li>A local path to the <code>.mrpack</code> file</li> <li>A modpack from Modrinth prefixed with \"<code>mr:</code>\"<ul> <li>For example, the modpack Packed would be written as \"<code>mr:packed</code>\"</li> </ul> </li> </ul>"},{"location":"tutorials/importing-modpacks/#packwiz","title":"packwiz","text":"<p>Like mrpacks, you can import while initializing with:</p> <pre><code>mcman init --packwiz &lt;source&gt;\n</code></pre> <p>The <code>source</code> argument can be</p> <ul> <li>An URL with <code>http</code>/<code>https</code> scheme</li> <li>Path to a local <code>pack.toml</code> file</li> </ul>"},{"location":"tutorials/importing-modpacks/#whats-next","title":"Whats next?","text":"<p>Tutorial -&gt; Getting Started -&gt; Building</p>"},{"location":"tutorials/variables/","title":"Variables","text":"<p>In your configuration files inside <code>config/</code>, you can use variables defined in <code>server.toml</code>:</p> \ud83d\udccb server.toml<pre><code>name = \"funnies\"\nmc_version = \"1.20\"\n[variables]\nPORT = \"25500\"\nMOTD = \"welcome to funnies\"\nWEBSITE = \"https://example.com/\"\nPrefix = \"[funnies]\"\n# key-value table\n</code></pre> Using environment variables <p>If your variables are sensitive (such as discord bot tokens) you can use environment variables:</p> LinuxWindows <pre><code>export TOKEN=asdf\n</code></pre> <pre><code>set TOKEN=asdf\n</code></pre> <p>Environment variables are combined with the <code>[variables]</code> field while building.</p> <p>And then use the variables inside any config file inside <code>config/</code>:</p> \ud83d\udcdc config/server.properties<pre><code># use a colon (:) to provide defaults inside configs\nserver-port=${PORT:25565}\ngamemode=creative\nmotd=${MOTD}\nonline-mode=false\n</code></pre> \ud83d\udcdc config/plugins/someplugin/config.yml<pre><code>bossbar: \"${SERVER_NAME} - ${WEBSITE}\"\nmessages:\nno_permissions: ${Prefix} You do not have the permissions.\ntoken: ${TOKEN}\n</code></pre> <p>Variables are then mapped into every configuration file in <code>config/</code> to <code>server/</code> while building the server.</p>"},{"location":"tutorials/variables/#results-in-server","title":"Results in server/","text":"\ud83d\udcdc server/server.properties<pre><code># use a colon (:) to provide defaults inside configs\nserver-port=25500\ngamemode=creative\nmotd=welcome to funnies\nonline-mode=false\n</code></pre> \ud83d\udcdc server/plugins/someplugin/config.yml<pre><code>bossbar: \"funnies - https://example.com/\"\nmessages:\nno_permissions: [funnies] You do not have the permissions.\ntoken: asdf\n</code></pre>"},{"location":"tutorials/variables/#special-variables","title":"Special Variables","text":"<p>These variables are also present when building:</p> <ul> <li><code>SERVER_NAME</code>: name property from server.toml</li> <li><code>SERVER_VERSION</code>: mc_version property from server.toml</li> </ul> <p>When exporting to mrpack or packwiz, these variables from <code>server.toml</code> are used:</p> Variable Name mrpack - <code>modrinth.index.json</code> packwiz - <code>pack.toml</code> <code>MODPACK_NAME</code> <code>name</code> <code>name</code> <code>MODPACK_SUMMARY</code> <code>summary</code> <code>description</code> <code>MODPACK_AUTHORS</code> nothing <code>author</code> <code>MODPACK_VERSION</code> nothing <code>version</code>"}]}